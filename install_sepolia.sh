#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
VIOLET='\033[0;35m'
RESET='\033[0m'

SCRIPT_VERSION="1.7.1"

# Default Port Configurations
# These variables define the default port numbers for various services.
# They can be overridden by user input or loaded from a configuration file if such a mechanism is implemented.
EXECUTION_RPC_PORT_DEFAULT="8545"
EXECUTION_P2P_PORT_DEFAULT="30303"
EXECUTION_AUTH_RPC_PORT_DEFAULT="8551" # Standard port for authenticated RPC
CONSENSUS_RPC_PORT_DEFAULT="5052" # Used for HTTP API (e.g., Prysm's gRPC gateway, Lighthouse/Teku REST API)
CONSENSUS_P2P_PORT_DEFAULT="9000" # Common P2P port for consensus clients (TCP/UDP)

# Effective ports to be used by the script.
# These are initialized with the default values and may be updated later by user input or a config file.
EXECUTION_RPC_PORT=$EXECUTION_RPC_PORT_DEFAULT
EXECUTION_P2P_PORT=$EXECUTION_P2P_PORT_DEFAULT
EXECUTION_AUTH_RPC_PORT=$EXECUTION_AUTH_RPC_PORT_DEFAULT
CONSENSUS_RPC_PORT=$CONSENSUS_RPC_PORT_DEFAULT
CONSENSUS_P2P_PORT=$CONSENSUS_P2P_PORT_DEFAULT

function show_logo() {
    echo -e "${BLUE}$(t "welcome")${RESET}"
    curl -s https://raw.githubusercontent.com/pittpv/sepolia-auto-install/main/other/logo.sh | bash
}

# Language selection
echo -e ${BLUE}"Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:${RESET}"
select lang in "English" "–†—É—Å—Å–∫–∏–π"; do
    case $lang in
        English)
            lang="en"
            break
            ;;
        –†—É—Å—Å–∫–∏–π)
            lang="ru"
            break
            ;;
        *)
            echo "Invalid choice, please select again"
            ;;
    esac
done

# Translation function
function t {
    local key="$1"
    shift

    if [[ "$lang" == "en" ]]; then
        case "$key" in
            "welcome") echo "              Welcome to the Sepolia Ethereum Node Setup and Management Script" ;;
            "jwt_gen") echo "üîê Generating jwt.hex..." ;;
            "choose_client") echo "üîß Choose consensus client:" ;;
            "client_selected") echo "‚úÖ Selected client: $1" ;;
            "invalid_choice") echo "‚ùå Invalid choice. Please try again." ;;
            "creating_compose") echo "üõ†Ô∏è Creating docker-compose.yml for client $1..." ;;
            "unknown_client") echo "‚ùå Unknown client: $1" ;;
            "node_install") echo "üöÄ Installing Sepolia node..." ;;
            "node_installed") echo "‚úÖ Node installed and running." ;;
            "node_update") echo "üîÑ Updating containers..." ;;
            "node_updated") echo "‚úÖ Update completed." ;;
            "select_logs") echo "üìã Select logs:" ;;
            "back") echo "Back" ;;
            "check_sync") echo "üì° Checking synchronization..." ;;
            "execution") echo "üß† Execution ($1):" ;;
            "execution_synced") echo "   ‚úÖ $1 synchronized" ;;
            "execution_syncing") echo "‚è≥ $1 is syncing..." ;;
            "prysm_synced") echo "   ‚úÖ Prysm synchronized" ;;
            "prysm_syncing") echo "‚è≥ Prysm is syncing..." ;;
            "teku_synced") echo "   ‚úÖ Teku synchronized" ;;
            "teku_syncing") echo "‚è≥ Teku is syncing..." ;;
            "lighthouse_synced") echo "   ‚úÖ Lighthouse synchronized" ;;
            "lighthouse_syncing") echo "‚è≥ Lighthouse is syncing..." ;;
            "syncing") echo "‚è≥ $1 is syncing..." ;;
            "current_block") echo "   Current block:     $1" ;;
            "target_block") echo "   Target block:     $1" ;;
            "blocks_left") echo "   Blocks remaining:  $1" ;;
            "progress") echo "   Progress:         $1%" ;;
            "sync_speed") echo "üìè Estimating sync speed..." ;;
            "speed") echo "   Speed:         $1 blocks/sec" ;;
            "eta") echo "   Estimated time:   $1" ;;
            "low_speed") echo "   ‚è±Ô∏è Speed too low to estimate" ;;
            "consensus") echo "üåê Consensus ($1):" ;;
            "no_sync_data") echo "‚ö†Ô∏è No /eth/v1/node/syncing data, trying finality..." ;;
            "beacon_active") echo "‚úÖ Beacon chain active (finality data received)" ;;
            "no_finality") echo "‚ùå Failed to get finality data" ;;
            "health") echo "‚ù§Ô∏è Beacon node health:" ;;
            "enter_tg_token") echo "Enter Telegram token: " ;;
            "enter_tg_chat") echo "Enter Telegram chat_id: " ;;
            "select_cron") echo "Select cron agent interval:" ;;
            "cron_options") echo $'1) Every 5 minutes\n2) Every 10 minutes\n3) Every 15 minutes\n4) Every 30 minutes\n5) Every hour' ;;
            "invalid_interval") echo "Invalid choice. Setting default interval: every 10 minutes." ;;
            "cron_installed") echo "‚úÖ Cron agent installed with interval: $1" ;;
            "cron_removed") echo "üóëÔ∏è Agent and cron task removed." ;;
            "stop_containers") echo "üõë Stopping containers... " ;;
            "containers_stopped") echo "‚úÖ Containers stopped." ;;
            "no_compose") echo "‚ö†Ô∏è docker-compose.yml not found." ;;
            "disk_usage") echo "üíΩ Disk space usage:" ;;
            "geth_usage") echo "üîß Geth:" ;;
            "client_usage") echo "üîß Consensus client ($1):" ;;
            "container_not_running") echo "Container $1 not running or unknown data path" ;;
            "client_not_found") echo "Client file not found: $1" ;;
            "confirm_delete") echo "‚ö†Ô∏è This will delete all node data. Continue? (y/n)" ;;
            "deleted") echo "üóëÔ∏è Node completely removed." ;;
            "cancelled") echo "‚ùå Deletion cancelled." ;;
            "menu_title") echo "====== Sepolia Node Manager ======" ;;
            "menu_options") echo -e '1) Install prerequisites (Docker and other software)\n2) Install node\n3) Update node\n4) Check logs\n5) Check sync status\n6) Setup cron agent wiht Tg notifications\n7) Remove cron agent\n8) Stop containers\n9) Start containers\n\033[31m10) Delete node\033[0m\n11) Change ports for installed node\n12) Check disk usage\n13) Firewall management\n14) Check RPC server\n15) Configure Docker resources\n\033[31m0) Exit\033[0m' ;;
            "goodbye") echo "üëã Goodbye!" ;;
            "invalid_option") echo "‚ùå Invalid choice, try again." ;;
            "select_option") echo "Select option: " ;;
            "start_containers") echo "üèÉ‚Äç‚û°Ô∏è Starting containers..." ;;
            "containers_started") echo "‚úÖ Containers started." ;;
            "client_label_prysm") echo "Prysm (recommended)" ;;
            "client_label_teku") echo "Teku" ;;
            "client_label_lighthouse") echo "Lighthouse" ;;
            "update_base") echo "üõ† Updating system and installing base packages..." ;;
            "install_docker") echo "üì¶ Installing Docker..." ;;
            "docker_exists") echo "‚úÖ Docker is already installed. Skipping." ;;
            "install_compose") echo "üì¶ Installing Docker Compose..." ;;
            "compose_exists") echo "‚úÖ Docker Compose is already installed. Skipping." ;;
            "requirements_done") echo "‚úÖ All requirements successfully installed." ;;
            "autoremove_clean") echo "Cleaning the system from unnecessary files..." ;;
            "choose_execution_client_prompt") echo "Choose execution client:" ;;
            "execution_client_selected") echo "‚úÖ Selected execution client: $1" ;;
            "client_label_geth") echo "Geth (recommended)" ;;
            "client_label_reth") echo "Reth" ;;
            "client_label_nethermind") echo "Nethermind" ;;
            "unknown_execution_client") echo "‚ùå Unknown execution client: $1." ;;
            "execution_client_usage") echo "üîß Execution client ($1):" ;;
            "jwt_not_found_error") echo "‚ùå Critical Error: JWT file not found at $1 before starting containers. Halting." ;;
            "sync_data_invalid") echo "‚ùå The synchronization data is invalid. If the client was launched recently, then try again later." ;;
            "teku_no_sync_data") echo "No Teku synchronization data. Please check again later." ;;
            "lighthouse_no_sync_data") echo "No Lighthouse synchronization data. Please check again later." ;;
            "prysm_no_sync_data") echo "No Prysm synchronization data. Please check again later." ;;
            "teku_no_finality") echo "Teku - no finality." ;;
            "lighthouse_no_finality") echo "Lighthouse - no finality." ;;
            "prysm_no_finality") echo "Prysm - no finality." ;;
            "teku_health") echo "Teku health." ;;
            "ask_custom_ports_prompt") echo "Do you want to configure custom ports? (yes/no, default: no)" ;;
            "enter_exec_rpc_port") printf "Enter Execution Client RPC Port (default: %s): " "$1" ;;
            "enter_exec_p2p_port") printf "Enter Execution Client P2P Port (default: %s): " "$1" ;;
            "enter_exec_auth_port") printf "Enter Execution Client Auth RPC Port (default: %s): " "$1" ;;
            "enter_consensus_rpc_port") printf "Enter Consensus Client RPC Port (default: %s): " "$1" ;;
            "enter_consensus_p2p_port") printf "Enter Consensus Client P2P Port (default: %s): " "$1" ;;
            "invalid_port_input") echo "‚ùå Invalid input. Port must be a number between 1024 and 65535." ;;
            "ports_configured_message") printf "‚úÖ Ports configured. Execution: RPC=%s, P2P=%s, Auth=%s. Consensus: RPC=%s, P2P=%s.\n" "$1" "$2" "$3" "$4" "$5" ;;
            "current_port_config") printf "üõà Current ports \n  Execution: RPC=%s, P2P=%s, Auth=%s.\n  Consensus: BEACON=%s, P2P=%s.\n" "$1" "$2" "$3" "$4" "$5" ;;
            "saving_port_config") echo "üíæ Saving port configuration..." ;;
            "port_config_saved") printf "‚úÖ Port configuration saved to %s.\n" "$1" ;;
            "loading_port_config") echo "üîÑ Attempting to load port configuration..." ;;
            "loaded_port_config_from_file") printf "‚úÖ Port configuration loaded from %s.\n" "$1" ;;
            "port_config_not_found") printf "‚ÑπÔ∏è No custom port configuration found (%s). Using default/session values.\n" "$1" ;;
            "reth_no_stages") echo "Reth: No detailed stage information available or already synced." ;;
            "reth_stage_progress") printf "  Stage '%s': %s / %s (%s%% complete)" "$1" "$2" "$3" "$4" ;;
            "reth_headers_target") printf "  Overall Chain Head Target (Headers): Block %s" "$1" ;;
            "reth_synced_fully") echo "Reth: Fully Synced (eth_syncing returned false)." ;;
            "reth_sync_details_title") echo "Reth Sync Stages Details:" ;;
            "nethermind_sync_stage_title") echo "Nethermind Sync Stage:" ;;
            "nethermind_current_stage") printf "  Current Stage: %s" "$1" ;;
            "nethermind_block_progress_title") echo "Nethermind Block Sync Progress:" ;;
            "nethermind_health_status_title") echo "Nethermind Health Status:" ;;
            "nethermind_health_info") echo "  Overall Status: %s\n  Node Health Details: %s" ;;
            "nethermind_health_request_failed") echo "  Failed to retrieve health status." ;;
            "nethermind_synced_fully") echo "Nethermind: Fully Synced (eth_syncing returned false)." ;;
            "nethermind_sync_data_missing") echo "Nethermind: Sync data missing from eth_syncing (after confirming not fully synced)." ;;
            "nethermind_rpc_error") printf "Nethermind: Error calling RPC method %s." "$1" ;;
            "chatid_linked") echo "‚úÖ ChatID successfully linked to Sepolia node" ;;
            "invalid_token") echo "Invalid Telegram bot token. Please try again." ;;
            "token_format") echo "Token should be in format: 1234567890:ABCdefGHIJKlmNoPQRsTUVwxyZ" ;;
            "invalid_chatid") echo "Invalid Telegram chat ID or the bot doesn't have access to this chat. Please try again." ;;
            "chatid_number") echo "Chat ID must be a number (can start with - for group chats). Please try again." ;;
            "teku_beacon_active") echo "Teku Beacon node is active." ;;
            "prysm_beacon_active") echo "Prysm Beacon node is active." ;;
            "lighthouse_beacon_active") echo "Lighthouse Beacon node is active." ;;
            "sync_check_basic") echo "Basic sync check." ;;
            "sync_progress_not_valid") echo "(Failed to retrieve data for progress calculation)" ;;
            "sync_progress_process") echo "Sync Progress:" ;;
            "updating_ports") echo "üîÑ Updating ports..." ;;
            "ports_updated") echo "‚úÖ Ports have been updated." ;;
            "restart_required") echo "‚ôªÔ∏è To apply changes, restart the node containers, remove the old cron agent, and create a new one." ;;
            "current_script_version") echo "üìå Current script version:" ;;
            "new_version_avialable") echo "üöÄ New version available:" ;;
            "new_version_update") echo "Please update your Sepolia script" ;;
            "version_up_to_date") echo "‚úÖ You are using the latest version" ;;
            # Basic messages
            "press_enter_to_continue") echo "Press Enter to continue..." ;;
            "are_you_sure_prompt") echo "Are you sure? [y/N]: " ;;
            # New translation keys
            "checking_docker_chain_rules") echo "Checking rules in DOCKER chain" ;;
            "docker_chain_available") echo "DOCKER chain is available" ;;
            "docker_chain_not_found") echo "DOCKER chain not found" ;;
            "checking_execution_rpc_port") echo "Checking rules for EXECUTION RPC port" ;;
            "checking_consensus_rpc_port") echo "Checking rules for CONSENSUS RPC port" ;;
            "found_rule_for_port") echo "Found rule for port" ;;
            "destination_ip") echo "Destination IP" ;;
            "failed_to_get_ip") echo "Failed to determine destination IP" ;;
            "adding_accept_rule_for_ip") echo "Adding ACCEPT rule for IP" ;;
            "accept_rule_already_exists") echo "ACCEPT rule already exists for IP" ;;
            "added_rules_count") echo "Added total rules count for" ;;
            # DOCKER-USER chain check messages
            "checking_docker_user_chain") echo "[Check] Looking for DOCKER-USER chain..." ;;
            "docker_user_chain_not_found") echo "[Error] DOCKER-USER chain not found!" ;;
            "creating_docker_user_chain") echo "Creating new DOCKER-USER chain..." ;;
            "docker_user_chain_created") echo "‚úÖ DOCKER-USER chain created" ;;
            "added_forward_to_docker_user") echo "Added FORWARD -> DOCKER-USER jump" ;;
            "docker_user_chain_available") echo "‚úÖ DOCKER-USER chain available" ;;
            "adding_forward_to_docker_user") echo "Adding FORWARD -> DOCKER-USER jump..." ;;
            "forward_to_docker_user_added") echo "‚úÖ FORWARD -> DOCKER-USER jump added" ;;
            "forward_to_docker_user_exists") echo "‚úÖ FORWARD -> DOCKER-USER jump already exists" ;;
            # UFW messages
            "checking_ufw_status") echo "[Check] Checking UFW status..." ;;
            "ufw_already_enabled") echo "‚úÖ UFW already enabled" ;;
            "ufw_disabled_configuring") echo "[Notice] UFW disabled, configuring..." ;;
            "adding_ssh_port_rule") echo "Adding SSH rule (port 22)..." ;;
            "adding_ssh_name_rule") echo "Adding SSH rule (by name ssh)..." ;;
            "adding_exec_p2p_port_rule") echo "Adding rule for execution –∏ consensus P2P..." ;;
            "port_rule_exists") echo "The rule for the port already exists" ;;
            "enabling_ufw") echo "Enabling UFW..." ;;
            "ufw_enabled_successfully") echo "‚úÖ UFW enabled successfully" ;;
            "current_ufw_status") echo "Current UFW status:" ;;
            "failed_to_enable_ufw") echo "[Error] Failed to enable UFW" ;;
            # Port blocking messages
            "blocking_rpc_ports") echo "[Action] Blocking incoming connections on RPC and BEACON ports" ;;
            "blocked_ports") echo "‚úÖ Blocked ports:" ;;
            "ports_already_blocked") echo "‚ö†Ô∏è Ports already blocked:" ;;
            # Rule addition messages
            "adding_rule") echo "[Action] Adding rule:" ;;
            "rule_added") echo "‚úÖ Rule added" ;;
            "failed_to_add_rule") echo "[Error] Failed to add rule!" ;;
            "rule_already_exists") echo "[Skip] Rule already exists" ;;
            # Rule viewing messages
            "current_port_rules") echo "‚îÄ‚îÄ Current port rules ‚îÄ‚îÄ" ;;
            "docker_user_port_rules") echo "DOCKER-USER port rules:" ;;
            "ufw_port_rules") echo "UFW port rules:" ;;
            "current_ip_rules") echo "‚îÄ‚îÄ Current IP rules ‚îÄ‚îÄ" ;;
            "docker_user_ip_rules") echo "DOCKER-USER IP rules:" ;;
            "ufw_ip_rules") echo "UFW IP rules:" ;;
            # Port management menu
            "port_management_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Port Management ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "open_port_option") echo "Open port (add rule)" ;;
            "close_port_option") echo "Close port (delete rule by number)" ;;
            "block_rpc_ports_option") echo "Block RPC and BEACON ports" ;;
            "return_to_main_menu") echo "Return to main menu" ;;
            # Port opening messages
            "opening_port") echo "‚îÄ‚îÄ Opening port ‚îÄ‚îÄ" ;;
            "enter_port_number_prompt") echo "Enter port number (e.g., 8080 or 8545,5052,9000): " ;;
            "select_direction") echo "Select direction:" ;;
            "incoming_connections") echo "Incoming connections (--dport)" ;;
            "outgoing_connections") echo "Outgoing connections (--sport)" ;;
            "all_directions") echo "All directions" ;;
            "select_direction_prompt") echo "Select direction: " ;;
            "select_protocol") echo "Select protocol:" ;;
            "all_protocols") echo "All protocols" ;;
            "select_protocol_prompt") echo "Select protocol: " ;;
            "adding_iptables_rule") echo "Adding iptables rule: port" ;;
            "adding_ufw_rule") echo "Adding UFW rule: port" ;;
            "in_and_out") echo "incoming and outgoing" ;;
            "direction") echo "direction" ;;
            "protocol") echo "protocol" ;;
            "invalid_input_error") echo "Error: invalid input" ;;
            # Rule deletion messages
            "deleting_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Rule Deletion ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "select_rule_type_to_delete") echo "Select rule type to delete:" ;;
            "delete_iptables_rule") echo "Delete iptables rule" ;;
            "delete_ufw_rule") echo "Delete UFW rule" ;;
            "delete_both_rules") echo "Delete both (iptables and UFW)" ;;
            "enter_iptables_rule_numbers") echo "Enter iptables rule numbers (e.g., 1 or 1,2 or 1,5-8,12):" ;;
            "enter_ufw_rule_numbers") echo "Enter UFW rule numbers (e.g., 1 or 1,2 or 1,5-8,12):" ;;
            "rule_numbers_to_delete_prompt") echo "Rule numbers to delete: " ;;
            "iptables_rule_numbers_prompt") echo "iptables rule numbers to delete: " ;;
            "ufw_rule_numbers_prompt") echo "UFW rule numbers to delete: " ;;
            "deleting_iptables_rule") echo "Deleting iptables rule" ;;
            "deleting_ufw_rule") echo "Deleting UFW rule" ;;
            "rule_not_found_skipping") echo "Rule not found, skipping" ;;
            "invalid_rule_number_skipping") echo "Invalid rule number, skipping" ;;
            "failed_to_delete_rule") echo "Failed to delete rule" ;;
            "deleted_iptables_rules") echo "Deleted iptables rules:" ;;
            "deleted_ufw_rules") echo "Deleted UFW rules:" ;;
            "invalid_choice_cancel") echo "Invalid choice, deletion canceled" ;;
            "invalid_range_skipping") echo "Invalid range, skipping" ;;
            # RPC ports blocking
            "blocking_rpc_ports_for_all") echo "‚îÄ‚îÄ Blocking RPC and BEACON ports for all incoming connections ‚îÄ‚îÄ" ;;
            "changing_ufw_policy_to_block_all") echo "Changing UFW policy to block all incoming connections" ;;
            # IP management menu
            "ip_management_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ IP Address Management ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "allow_access_from_ip") echo "Allow access from IP address" ;;
            "deny_access_delete_rule") echo "Deny access (delete rule)" ;;
            # IP management messages
            "allowing_access_from_ip") echo "‚îÄ‚îÄ Allowing access from IP ‚îÄ‚îÄ" ;;
            "enter_ip_or_subnet_prompt") echo "Enter IP address or subnet (e.g., 192.168.1.1 or 192.168.1.0/24 or few addresses separated by commas): " ;;
            "enter_port_number_optional_prompt") echo "Enter port number (5052 or 5052,9100 or leave empty for all ports): " ;;
            "adding_iptables_rule_for_all_traffic_from") echo "Adding iptables rule for all traffic from" ;;
            "adding_ufw_rule_for_all_traffic_from") echo "Adding UFW rule for all traffic from" ;;
            "adding_iptables_rule_for_port") echo "Adding iptables rule for port" ;;
            "from") echo "from" ;;
            "adding_ufw_rule_for_port") echo "[Action] Adding UFW rule for port" ;;
            "port_must_be_number_error") echo "Error: port must be a number" ;;
            "correct_input_examples") echo "Correct input examples:" ;;
            "ip_example") echo "IP: 192.168.1.1 or 10.0.0.0/24" ;;
            # View all rules
            "view_all_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ View All Rules ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "current_docker_user_chain_rules") echo "Current DOCKER-USER chain rules:" ;;
            "no_rules_in_docker_user_chain") echo "No rules in DOCKER-USER chain" ;;
            "current_ufw_rules") echo "Current UFW rules:" ;;
            "no_active_ufw_rules") echo "No active UFW rules" ;;
            "iptables_rules_stats") echo "iptables rules statistics:" ;;
            "total_accept_rules") echo "Total ACCEPT rules:" ;;
            "total_drop_reject_rules") echo "Total DROP/REJECT rules:" ;;
            "ufw_rules_stats") echo "UFW rules statistics:" ;;
            "default_policy") echo "Default policy:" ;;
            "incoming") echo "Incoming:" ;;
            "outgoing") echo "Outgoing:" ;;
            "total_allow_rules") echo "Total ALLOW rules:" ;;
            "total_deny_reject_rules") echo "Total DENY/REJECT rules:" ;;
            # Rules reset
            "reset_all_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Reset All Rules ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "you_are_about_to_perform") echo "You are about to perform the following actions:" ;;
            "clear_all_rules_in_docker_user_chain") echo "Clear all rules in DOCKER-USER chain" ;;
            "reset_all_ufw_rules") echo "Reset all UFW rules" ;;
            "restart_docker_service") echo "Restart Docker service" ;;
            "clearing_docker_user_chain") echo "Clearing DOCKER-USER chain" ;;
            "all_docker_user_rules_deleted") echo "‚úÖ All DOCKER-USER rules deleted" ;;
            "failed_to_clear_docker_user") echo "[Error] Failed to clear DOCKER-USER" ;;
            "resetting_ufw_rules") echo "Resetting UFW rules" ;;
            "all_ufw_rules_reset") echo "‚úÖ All UFW rules reset" ;;
            "failed_to_reset_ufw") echo "[Error] Failed to reset UFW" ;;
            "restarting_docker") echo "Restarting Docker" ;;
            "docker_restarted_successfully") echo "‚úÖ Docker restarted successfully" ;;
            "current_docker_user_status") echo "Current DOCKER-USER status:" ;;
            "failed_to_restart_docker") echo "[Error] Failed to restart Docker" ;;
            "rules_reset_cancelled") echo "Rules reset cancelled" ;;
            # Main menu
            "script_works_in_iptables") echo "Script works with iptables using DOCKER-USER chain and duplicates rules for ufw." ;;
            "port_ip_management_logic") echo "Port/IP management logic is based on adding/removing allow rules." ;;
            "on_first_run") echo "Before working with the function, run the Sepolia node installation. On first run:" ;;
            "first_run_option_1") echo "First run option 1. Confirm ufw activation and ensure iptables are configured;" ;;
            "first_run_option_2") echo "Then using option 2 (item 1 within the option), open the required ports for your node to work. For example for Aztec: 8080,40400" ;;
            "first_run_option_3") echo "Finally using option 2 (item 3 within the option), block RPC and BEACON ports for incoming connections." ;;
            "now_you_can_add_remove") echo "Now you can add/remove needed ports and addresses using options 2 and 3." ;;
            "firewall_management_main_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Firewall Management Main Menu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "enable_and_prepare_option") echo "Enable and prepare (ufw, iptables)" ;;
            "port_management_option") echo "Port management" ;;
            "ip_management_option") echo "IP address management" ;;
            "view_all_rules_option") echo "View all rules" ;;
            "reset_all_rules_option") echo "Reset all rules and restart Docker" ;;
            "exit_option") echo "Exit" ;;
            "exiting_firewall_menu") echo "Exiting firewall menu" ;;
            "configuring_docker_resources") echo "üîß Configuring Docker container resources based on system specifications..." ;;
            "system_info") echo "üìä System Information:" ;;
            "calculated_resources") echo "üìà Calculated Resource Allocation:" ;;
            "resource_config_saved") echo "‚úÖ Resource configuration saved to" ;;
            "resource_config_loaded") echo "‚úÖ Resource configuration loaded from" ;;
            "using_default_resources") echo "‚ÑπÔ∏è Using default resource configuration" ;;
            "execution_rpc_error") echo "‚ùå Failed to get response from execution client RPC" ;;
            "execution_rpc_error_with_details") echo "‚ùå Execution client RPC error: %s" ;;
            "execution_no_result") echo "‚ùå Invalid response from execution client - no result field" ;;
            "consensus_rpc_error") echo "‚ùå Failed to get response from consensus client RPC" ;;
            "consensus_rpc_error_with_details") echo "‚ùå Consensus client RPC error: %s" ;;
            "consensus_no_data") echo "‚ùå Invalid response from consensus client - no data field" ;;
            "resource_limits_prompt") echo "üîß Resource Limits Configuration" ;;
            "resource_limits_description") echo "The script has calculated optimal resource limits for your containers based on your system specifications." ;;
            "resource_limits_warning") echo "‚ö†Ô∏è  Applying resource limits may affect performance but ensures system stability." ;;
            "apply_resource_limits_question") echo "Do you want to apply these resource limits? (yes/no): " ;;
            "applying_resource_limits") echo "üîß Applying resource limits..." ;;
            "resource_limits_applied") echo "‚úÖ Resource limits have been applied successfully" ;;
            "skipping_resource_limits") echo "‚è≠Ô∏è  Skipping resource limits..." ;;
            "resource_limits_disabled") echo "‚ÑπÔ∏è  Resource limits are disabled - containers will use unlimited resources" ;;
            "resource_limits_enabled") echo "‚úÖ Resource limits are enabled" ;;
            "please_enter_yes_or_no") echo "Please enter 'yes' or 'no'" ;;
            *) echo "$key" ;;
        esac
    else
        case "$key" in
            "welcome") echo "          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Sepolia Ethereum" ;;
            "jwt_gen") echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è jwt.hex..." ;;
            "choose_client") echo "üîß –í—ã–±–µ—Ä–∏—Ç–µ consensus –∫–ª–∏–µ–Ω—Ç:" ;;
            "client_selected") echo "‚úÖ –í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: $1" ;;
            "invalid_choice") echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            "creating_compose") echo "üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ $1..." ;;
            "unknown_client") echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: $1" ;;
            "node_install") echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Sepolia-–Ω–æ–¥—ã..." ;;
            "node_installed") echo "‚úÖ –ù–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞." ;;
            "node_update") echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." ;;
            "node_updated") echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ." ;;
            "select_logs") echo "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏:" ;;
            "back") echo "–ù–∞–∑–∞–¥" ;;
            "check_sync") echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..." ;;
            "execution") echo "üß† Execution ($1):" ;;
            "execution_synced") echo "   ‚úÖ $1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" ;;
            "execution_syncing") echo "‚è≥ $1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è..." ;;
            "prysm_synced") echo "   ‚úÖ Prysm —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" ;;
            "prysm_syncing") echo "‚è≥ Prysm —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è..." ;;
            "teku_synced") echo "   ‚úÖ Teku —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" ;;
            "teku_syncing") echo "‚è≥ Teku —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è..." ;;
            "lighthouse_synced") echo "   ‚úÖ Lighthouse —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" ;;
            "lighthouse_syncing") echo "‚è≥ Lighthouse —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è..." ;;
            "syncing") echo "‚è≥ $1 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è..." ;;
            "current_block") echo "   –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:     $1" ;;
            "target_block") echo "   –¶–µ–ª–µ–≤–æ–π –±–ª–æ–∫:     $1" ;;
            "blocks_left") echo "   –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤:  $1" ;;
            "progress") echo "   –ü—Ä–æ–≥—Ä–µ—Å—Å:         $1%" ;;
            "sync_speed") echo "üìè –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..." ;;
            "speed") echo "   –°–∫–æ—Ä–æ—Å—Ç—å:         $1 –±–ª–æ–∫–æ–≤/—Å–µ–∫" ;;
            "eta") echo "   –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:   $1" ;;
            "low_speed") echo "   ‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏" ;;
            "consensus") echo "üåê Consensus ($1):" ;;
            "no_sync_data") echo "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö /eth/v1/node/syncing, –ø—Ä–æ–±—É–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é..." ;;
            "beacon_active") echo "‚úÖ Beacon chain –∞–∫—Ç–∏–≤–µ–Ω (–¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã)" ;;
            "no_finality") echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏" ;;
            "health") echo "‚ù§Ô∏è Beacon node health:" ;;
            "enter_tg_token") echo "–í–≤–µ–¥–∏—Ç–µ Telegram —Ç–æ–∫–µ–Ω: " ;;
            "enter_tg_chat") echo "–í–≤–µ–¥–∏—Ç–µ Telegram chat_id: " ;;
            "select_cron") echo "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ cron-–∞–≥–µ–Ω—Ç–∞:" ;;
            "cron_options") echo $'1) –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n2) –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n3) –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç\n4) –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n5) –ö–∞–∂–¥—ã–π —á–∞—Å' ;;
            "invalid_interval") echo "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç." ;;
            "cron_installed") echo "‚úÖ Cron-–∞–≥–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: $1" ;;
            "cron_removed") echo "üóëÔ∏è –ê–≥–µ–Ω—Ç –∏ –∑–∞–¥–∞—á–∞ cron —É–¥–∞–ª–µ–Ω—ã." ;;
            "stop_containers") echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤... " ;;
            "containers_stopped") echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã." ;;
            "no_compose") echo "‚ö†Ô∏è –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω." ;;
            "disk_usage") echo "üíΩ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:" ;;
            "geth_usage") echo "üîß Geth:" ;;
            "client_usage") echo "üîß Consensus –∫–ª–∏–µ–Ω—Ç ($1):" ;;
            "container_not_running") echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $1 –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö" ;;
            "client_not_found") echo "–§–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $1" ;;
            "confirm_delete") echo "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)" ;;
            "deleted") echo "üóëÔ∏è –ù–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞." ;;
            "cancelled") echo "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." ;;
            "menu_title") echo "====== Sepolia Node Manager ======" ;;
            "menu_options") echo -e '1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Docker –∏ –¥—Ä—É–≥–æ–µ –ü–û)\n2) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É\n3) –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É\n4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏\n5) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n6) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cron-–∞–≥–µ–Ω—Ç —Å –¢–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n7) –£–¥–∞–ª–∏—Ç—å cron-–∞–≥–µ–Ω—Ç\n8) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã\n9) –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã\n\033[31m10) –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É\033[0m\n11) –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–¥—ã\n12) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω–∏–º–∞–µ–º–æ–µ –º–µ—Å—Ç–æ\n13) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π—Ä–≤–æ–ª–ª–æ–º\n14) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å RPC-—Å–µ—Ä–≤–µ—Ä\n15) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã Docker\n\033[31m0) –í—ã–π—Ç–∏\033[0m' ;;
            "goodbye") echo "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" ;;
            "invalid_option") echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            "select_option") echo "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: " ;;
            "start_containers") echo "üèÉ‚Äç‚û°Ô∏è –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." ;;
            "containers_started") echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã." ;;
            "client_label_prysm") echo "Prysm (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)" ;;
            "client_label_teku") echo "Teku" ;;
            "client_label_lighthouse") echo "Lighthouse" ;;
            "update_base") echo "üõ† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..." ;;
            "install_docker") echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..." ;;
            "docker_exists") echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º" ;;
            "install_compose") echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..." ;;
            "compose_exists") echo "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º" ;;
            "requirements_done") echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" ;;
            "autoremove_clean") echo "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." ;;
            "choose_execution_client_prompt") echo "–í—ã–±–µ—Ä–∏—Ç–µ execution –∫–ª–∏–µ–Ω—Ç:" ;;
            "execution_client_selected") echo "‚úÖ –í—ã–±—Ä–∞–Ω execution –∫–ª–∏–µ–Ω—Ç: $1" ;;
            "client_label_geth") echo "Geth (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)" ;;
            "client_label_reth") echo "Reth" ;;
            "client_label_nethermind") echo "Nethermind" ;;
            "unknown_execution_client") echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π execution –∫–ª–∏–µ–Ω—Ç: $1." ;;
            "execution_client_usage") echo "üîß Execution –∫–ª–∏–µ–Ω—Ç ($1):" ;;
            "jwt_not_found_error") echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: JWT —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $1 –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –û—Å—Ç–∞–Ω–æ–≤–∫–∞." ;;
            "sync_data_invalid") echo "‚ùå –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ." ;;
            "teku_no_sync_data") echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Teku. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–¥–Ω–µ–µ." ;;
            "lighthouse_no_sync_data") echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Lighthouse. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–¥–Ω–µ–µ." ;;
            "prysm_no_sync_data") echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Prysm. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–¥–Ω–µ–µ." ;;
            "teku_no_finality") echo "Teku - –Ω–µ—Ç —Ñ–∏–Ω–∞–ª–∏—Ç–∏." ;;
            "lighthouse_no_finality") echo "Lighthouse - –Ω–µ—Ç —Ñ–∏–Ω–∞–ª–∏—Ç–∏." ;;
            "prysm_no_finality") echo "Prysm - –Ω–µ—Ç —Ñ–∏–Ω–∞–ª–∏—Ç–∏." ;;
            "teku_health") echo "Teku –∑–¥–æ—Ä–æ–≤—å–µ." ;;
            "ask_custom_ports_prompt") echo "–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Ä—Ç—ã? (yes/no, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: no)" ;;
            "enter_exec_rpc_port") printf "–í–≤–µ–¥–∏—Ç–µ RPC-–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s): " "$1" ;;
            "enter_exec_p2p_port") printf "–í–≤–µ–¥–∏—Ç–µ P2P-–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s): " "$1" ;;
            "enter_exec_auth_port") printf "–í–≤–µ–¥–∏—Ç–µ Auth RPC-–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s): " "$1" ;;
            "enter_consensus_rpc_port") printf "–í–≤–µ–¥–∏—Ç–µ RPC-–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s): " "$1" ;;
            "enter_consensus_p2p_port") printf "–í–≤–µ–¥–∏—Ç–µ P2P-–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s): " "$1" ;;
            "invalid_port_input") echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1024 –¥–æ 65535." ;;
            "ports_configured_message") printf "‚úÖ –ü–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: RPC=%s, P2P=%s, Auth=%s. –ö–æ–Ω—Å–µ–Ω—Å—É—Å: RPC=%s, P2P=%s.\n" "$1" "$2" "$3" "$4" "$5" ;;
            "current_port_config") printf "üõà –¢–µ–∫—É—â–∏–µ –ø–æ—Ä—Ç—ã \n  –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: RPC=%s, P2P=%s, Auth=%s.\n  –ö–æ–Ω—Å–µ–Ω—Å—É—Å: BEACON=%s, P2P=%s.\n" "$1" "$2" "$3" "$4" "$5" ;;
            "saving_port_config") echo "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–æ–≤..." ;;
            "port_config_saved") printf "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ %s.\n" "$1" ;;
            "loading_port_config") echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–æ–≤..." ;;
            "loaded_port_config_from_file") printf "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ %s.\n" "$1" ;;
            "port_config_not_found") printf "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (%s). –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é/—Å–µ—Å—Å–∏–∏.\n" "$1" ;;
            "reth_no_stages") echo "Reth: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ." ;;
            "reth_stage_progress") printf "  –≠—Ç–∞–ø '%s': %s / %s (%s%% –∑–∞–≤–µ—Ä—à–µ–Ω–æ)" "$1" "$2" "$3" "$4" ;;
            "reth_headers_target") printf "  –û–±—â–∞—è —Ü–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ —Ü–µ–ø–æ—á–∫–∏ (Headers): –ë–ª–æ–∫ %s" "$1" ;;
            "reth_synced_fully") echo "Reth: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (eth_syncing –≤–µ—Ä–Ω—É–ª false)." ;;
            "reth_sync_details_title") echo "Reth –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —ç—Ç–∞–ø–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:" ;;
            "nethermind_sync_stage_title") echo "–≠—Ç–∞–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Nethermind:" ;;
            "nethermind_current_stage") printf "  –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: %s" "$1" ;;
            "nethermind_block_progress_title") echo "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ Nethermind:" ;;
            "nethermind_health_status_title") echo "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Nethermind:" ;;
            "nethermind_health_info") echo "  –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: %s\n  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã: %s" ;;
            "nethermind_health_request_failed") echo "  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏." ;;
            "nethermind_synced_fully") echo "Nethermind: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (eth_syncing –≤–µ—Ä–Ω—É–ª false)." ;;
            "nethermind_sync_data_missing") echo "Nethermind: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ eth_syncing (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)." ;;
            "nethermind_rpc_error") printf "Nethermind: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ RPC –º–µ—Ç–æ–¥–∞ %s." "$1" ;;
            "chatid_linked") echo "‚úÖ ChatID —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Sepolia node" ;;
            "invalid_token") echo "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            "token_format") echo "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1234567890:ABCdefGHIJKlmNoPQRsTUVwxyZ" ;;
            "invalid_chatid") echo "–ù–µ–≤–µ—Ä–Ω—ã–π Chat ID –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            "chatid_number") echo "Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            "teku_beacon_active") echo "Beacon-–Ω–æ–¥–∞ Teku –∞–∫—Ç–∏–≤–Ω–∞." ;;
            "prysm_beacon_active") echo "Beacon-–Ω–æ–¥–∞ Prysm –∞–∫—Ç–∏–≤–Ω–∞." ;;
            "lighthouse_beacon_active") echo "Beacon-–Ω–æ–¥–∞ Lighthouse –∞–∫—Ç–∏–≤–Ω–∞." ;;
            "sync_check_basic") echo "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏." ;;
            "sync_progress_not_valid") echo "(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)" ;;
            "sync_progress_process") echo "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:" ;;
            "updating_ports") echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—ã..." ;;
            "ports_updated") echo "‚úÖ –ü–æ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã." ;;
            "restart_required") echo "‚ôªÔ∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–æ–¥—ã, —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä–æ–≥–æ cron-–∞–≥–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ." ;;
            "current_script_version") echo "üìå –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞:" ;;
            "new_version_avialable") echo "üöÄ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:" ;;
            "new_version_update") echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ Sepolia —Å–∫—Ä–∏–ø—Ç" ;;
            "version_up_to_date") echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è" ;;
            "ufw_wrong_ip") echo "–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞" ;;
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            "press_enter_to_continue") echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            "are_you_sure_prompt") echo "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " ;;
            # –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            "checking_docker_chain_rules") echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –≤ —Ü–µ–ø–æ—á–∫–µ DOCKER" ;;
            "docker_chain_available") echo "–¶–µ–ø–æ—á–∫–∞ DOCKER –¥–æ—Å—Ç—É–ø–Ω–∞" ;;
            "docker_chain_not_found") echo "–¶–µ–ø–æ—á–∫–∞ DOCKER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" ;;
            "checking_execution_rpc_port") echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è EXECUTION RPC –ø–æ—Ä—Ç–∞" ;;
            "checking_consensus_rpc_port") echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è CONSENSUS RPC –ø–æ—Ä—Ç–∞" ;;
            "found_rule_for_port") echo "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞" ;;
            "destination_ip") echo "IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è" ;;
            "failed_to_get_ip") echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è" ;;
            "adding_accept_rule_for_ip") echo "–î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è IP" ;;
            "accept_rule_already_exists") echo "–†–∞–∑—Ä–µ—à–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è IP" ;;
            "added_rules_count") echo "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª –¥–ª—è" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ø–æ—á–∫–∏ DOCKER-USER
            "checking_docker_user_chain") echo "[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ò—â–µ–º —Ü–µ–ø–æ—á–∫—É DOCKER-USER..." ;;
            "docker_user_chain_not_found") echo "[–û—à–∏–±–∫–∞] –¶–µ–ø–æ—á–∫–∞ DOCKER-USER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" ;;
            "creating_docker_user_chain") echo "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É DOCKER-USER..." ;;
            "docker_user_chain_created") echo "‚úÖ –¶–µ–ø–æ—á–∫–∞ DOCKER-USER —Å–æ–∑–¥–∞–Ω–∞" ;;
            "added_forward_to_docker_user") echo "–î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ FORWARD -> DOCKER-USER" ;;
            "docker_user_chain_available") echo "‚úÖ –¶–µ–ø–æ—á–∫–∞ DOCKER-USER –¥–æ—Å—Ç—É–ø–Ω–∞" ;;
            "adding_forward_to_docker_user") echo "–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ FORWARD -> DOCKER-USER..." ;;
            "forward_to_docker_user_added") echo "‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ FORWARD -> DOCKER-USER –¥–æ–±–∞–≤–ª–µ–Ω" ;;
            "forward_to_docker_user_exists") echo "‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ FORWARD -> DOCKER-USER —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è UFW
            "checking_ufw_status") echo "[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å UFW..." ;;
            "ufw_already_enabled") echo "‚úÖ UFW —É–∂–µ –≤–∫–ª—é—á–µ–Ω" ;;
            "ufw_disabled_configuring") echo "[–í–Ω–∏–º–∞–Ω–∏–µ] UFW –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º..." ;;
            "adding_ssh_port_rule") echo "–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è SSH (22 –ø–æ—Ä—Ç)..." ;;
            "adding_ssh_name_rule") echo "–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è SSH (–ø–æ –∏–º–µ–Ω–∏ ssh)..." ;;
            "adding_exec_p2p_port_rule") echo "–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è execution –∏ consensus P2P..." ;;
            "port_rule_exists") echo "–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" ;;
            "enabling_ufw") echo "–í–∫–ª—é—á–∞–µ–º UFW..." ;;
            "ufw_enabled_successfully") echo "‚úÖ UFW —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω" ;;
            "current_ufw_status") echo "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å UFW:" ;;
            "failed_to_enable_ufw") echo "[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å UFW" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç–æ–≤
            "blocking_rpc_ports") echo "[–î–µ–π—Å—Ç–≤–∏–µ] –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ RPC –∏ BEACON –ø–æ—Ä—Ç—ã" ;;
            "blocked_ports") echo "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Ä—Ç—ã:" ;;
            "ports_already_blocked") echo "‚ö†Ô∏è –ü–æ—Ä—Ç—ã —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
            "adding_rule") echo "[–î–µ–π—Å—Ç–≤–∏–µ] –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ:" ;;
            "rule_added") echo "‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ" ;;
            "failed_to_add_rule") echo "[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ!" ;;
            "rule_already_exists") echo "[–ü—Ä–æ–ø—É—Å–∫] –ü—Ä–∞–≤–∏–ª–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª
            "current_port_rules") echo "‚îÄ‚îÄ –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤ ‚îÄ‚îÄ" ;;
            "docker_user_port_rules") echo "–ü—Ä–∞–≤–∏–ª–∞ DOCKER-USER (–ø–æ—Ä—Ç—ã):" ;;
            "ufw_port_rules") echo "–ü—Ä–∞–≤–∏–ª–∞ UFW (–ø–æ—Ä—Ç—ã):" ;;
            "current_ip_rules") echo "‚îÄ‚îÄ –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è IP ‚îÄ‚îÄ" ;;
            "docker_user_ip_rules") echo "–ü—Ä–∞–≤–∏–ª–∞ DOCKER-USER (IP):" ;;
            "ufw_ip_rules") echo "–ü—Ä–∞–≤–∏–ª–∞ UFW (IP):" ;;
            # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏
            "port_management_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "open_port_option") echo "–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç (–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ)" ;;
            "close_port_option") echo "–ó–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç (—É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É)" ;;
            "block_rpc_ports_option") echo "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å RPC –∏ BEACON –ø–æ—Ä—Ç—ã" ;;
            "return_to_main_menu") echo "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–æ–≤
            "opening_port") echo "‚îÄ‚îÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ ‚îÄ‚îÄ" ;;
            "enter_port_number_prompt") echo "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8080 –∏–ª–∏ 8545,5052,9000): " ;;
            "select_direction") echo "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:" ;;
            "incoming_connections") echo "–í—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (--dport)" ;;
            "outgoing_connections") echo "–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (--sport)" ;;
            "all_directions") echo "–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" ;;
            "select_direction_prompt") echo "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " ;;
            "select_protocol") echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª:" ;;
            "all_protocols") echo "–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã" ;;
            "select_protocol_prompt") echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª: " ;;
            "adding_iptables_rule") echo "–î–æ–±–∞–≤–ª—è–µ–º iptables –ø—Ä–∞–≤–∏–ª–æ: –ø–æ—Ä—Ç" ;;
            "adding_ufw_rule") echo "–î–æ–±–∞–≤–ª—è–µ–º UFW –ø—Ä–∞–≤–∏–ª–æ: –ø–æ—Ä—Ç" ;;
            "in_and_out") echo "–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ" ;;
            "direction") echo "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" ;;
            "protocol") echo "–ø—Ä–æ—Ç–æ–∫–æ–ª" ;;
            "invalid_input_error") echo "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
            "deleting_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "select_rule_type_to_delete") echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:" ;;
            "delete_iptables_rule") echo "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ iptables" ;;
            "delete_ufw_rule") echo "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ UFW" ;;
            "delete_both_rules") echo "–£–¥–∞–ª–∏—Ç—å –æ–±–∞ (iptables –∏ UFW)" ;;
            "enter_iptables_rule_numbers") echo "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ iptables (–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 1,2 –∏–ª–∏ 1,5-8,12):" ;;
            "enter_ufw_rule_numbers") echo "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ UFW (–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 1,2 –∏–ª–∏ 1,5-8,12):" ;;
            "rule_numbers_to_delete_prompt") echo "–ù–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " ;;
            "iptables_rule_numbers_prompt") echo "–ù–æ–º–µ—Ä–∞ iptables –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " ;;
            "ufw_rule_numbers_prompt") echo "–ù–æ–º–µ—Ä–∞ UFW –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " ;;
            "deleting_iptables_rule") echo "–£–¥–∞–ª—è–µ–º iptables –ø—Ä–∞–≤–∏–ª–æ" ;;
            "deleting_ufw_rule") echo "–£–¥–∞–ª—è–µ–º UFW –ø—Ä–∞–≤–∏–ª–æ" ;;
            "rule_not_found_skipping") echo "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" ;;
            "invalid_rule_number_skipping") echo "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" ;;
            "failed_to_delete_rule") echo "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ" ;;
            "deleted_iptables_rules") echo "–£–¥–∞–ª–µ–Ω–æ iptables –ø—Ä–∞–≤–∏–ª:" ;;
            "deleted_ufw_rules") echo "–£–¥–∞–ª–µ–Ω–æ UFW –ø—Ä–∞–≤–∏–ª:" ;;
            "invalid_choice_cancel") echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è" ;;
            "invalid_range_skipping") echo "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" ;;
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ RPC –ø–æ—Ä—Ç–æ–≤
            "blocking_rpc_ports_for_all") echo "‚îÄ‚îÄ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ RPC –∏ BEACON –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚îÄ‚îÄ" ;;
            "changing_ufw_policy_to_block_all") echo "–ú–µ–Ω—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É UFW –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π" ;;
            # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP
            "ip_management_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "allow_access_from_ip") echo "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å IP-–∞–¥—Ä–µ—Å–∞" ;;
            "deny_access_delete_rule") echo "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (—É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ)" ;;
            # –°–æ–æ–±—â–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP
            "allowing_access_from_ip") echo "‚îÄ‚îÄ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Å IP ‚îÄ‚îÄ" ;;
            "enter_ip_or_subnet_prompt") echo "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–¥—Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1 –∏–ª–∏ 192.168.1.0/24 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ip —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): " ;;
            "enter_port_number_optional_prompt") echo "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (5052 –∏–ª–∏ 5052,9100 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤): " ;;
            "adding_iptables_rule_for_all_traffic_from") echo "–î–æ–±–∞–≤–ª—è–µ–º iptables –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å" ;;
            "adding_ufw_rule_for_all_traffic_from") echo "–î–æ–±–∞–≤–ª—è–µ–º UFW –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å" ;;
            "adding_iptables_rule_for_port") echo "–î–æ–±–∞–≤–ª—è–µ–º iptables –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞" ;;
            "from") echo "—Å" ;;
            "adding_ufw_rule_for_port") echo "[–î–µ–π—Å—Ç–≤–∏–µ] –î–æ–±–∞–≤–ª—è–µ–º UFW –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞" ;;
            "port_must_be_number_error") echo "–û—à–∏–±–∫–∞: –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" ;;
            "correct_input_examples") echo "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:" ;;
            "ip_example") echo "IP: 192.168.1.1 –∏–ª–∏ 10.0.0.0/24" ;;
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
            "view_all_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "current_docker_user_chain_rules") echo "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ü–µ–ø–æ—á–∫–∏ DOCKER-USER:" ;;
            "no_rules_in_docker_user_chain") echo "–í —Ü–µ–ø–æ—á–∫–µ DOCKER-USER –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª" ;;
            "current_ufw_rules") echo "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ UFW:" ;;
            "no_active_ufw_rules") echo "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª UFW" ;;
            "iptables_rules_stats") echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª iptables:" ;;
            "total_accept_rules") echo "–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª ACCEPT:" ;;
            "total_drop_reject_rules") echo "–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª DROP/REJECT:" ;;
            "ufw_rules_stats") echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª UFW:" ;;
            "default_policy") echo "–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:" ;;
            "incoming") echo "–í—Ö–æ–¥—è—â–∏–µ:" ;;
            "outgoing") echo "–ò—Å—Ö–æ–¥—è—â–∏–µ:" ;;
            "total_allow_rules") echo "–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª ALLOW:" ;;
            "total_deny_reject_rules") echo "–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª DENY/REJECT:" ;;
            # –°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª
            "reset_all_rules") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "you_are_about_to_perform") echo "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:" ;;
            "clear_all_rules_in_docker_user_chain") echo "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ü–µ–ø–æ—á–∫–µ DOCKER-USER" ;;
            "reset_all_ufw_rules") echo "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ UFW" ;;
            "restart_docker_service") echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å" ;;
            "clearing_docker_user_chain") echo "–û—á–∏—â–∞–µ–º —Ü–µ–ø–æ—á–∫—É DOCKER-USER" ;;
            "all_docker_user_rules_deleted") echo "‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ DOCKER-USER —É–¥–∞–ª–µ–Ω—ã" ;;
            "failed_to_clear_docker_user") echo "[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å DOCKER-USER" ;;
            "resetting_ufw_rules") echo "–°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ UFW" ;;
            "all_ufw_rules_reset") echo "‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ UFW —Å–±—Ä–æ—à–µ–Ω—ã" ;;
            "failed_to_reset_ufw") echo "[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å UFW" ;;
            "restarting_docker") echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker" ;;
            "docker_restarted_successfully") echo "‚úÖ Docker —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" ;;
            "current_docker_user_status") echo "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DOCKER-USER:" ;;
            "failed_to_restart_docker") echo "[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker" ;;
            "rules_reset_cancelled") echo "–°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª –æ—Ç–º–µ–Ω–µ–Ω" ;;
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            "script_works_in_iptables") echo "–°–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ iptables c —Ü–µ–ø–æ—á–∫–æ–π DOCKER-USER –∏ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è ufw." ;;
            "port_ip_management_logic") echo "–õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏/–∞–¥—Ä–µ—Å–∞–º–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–∞—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª." ;;
            "on_first_run") echo "–ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Sepolia –Ω–æ–¥—ã. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ:" ;;
            "first_run_option_1") echo "C–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ü–∏—é 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ ufw –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã;" ;;
            "first_run_option_2") echo "–ó–∞—Ç–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ü–∏—é 2 (–ø—É–Ω–∫—Ç 1 –≤–Ω—É—Ç—Ä–∏ –æ–ø—Ü–∏–∏), –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–π –Ω–æ–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è Aztec: 8080,40400" ;;
            "first_run_option_3") echo "–í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ü–∏—é 2 (–ø—É–Ω–∫—Ç 3 –≤–Ω—É—Ç—Ä–∏ –æ–ø—Ü–∏–∏), –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É RPC –∏ BEACON –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π." ;;
            "now_you_can_add_remove") echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –ø–æ—Ä—Ç—ã –∏ –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –æ–ø—Ü–∏–π 2 –∏ 3." ;;
            "firewall_management_main_menu") echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–µ—Ä–≤–æ–ª–æ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" ;;
            "enable_and_prepare_option") echo "–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (ufw, iptables)" ;;
            "port_management_option") echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏" ;;
            "ip_management_option") echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞–º–∏" ;;
            "view_all_rules_option") echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª" ;;
            "reset_all_rules_option") echo "–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker" ;;
            "exit_option") echo "–í—ã—Ö–æ–¥" ;;
            "exiting_firewall_menu") echo "–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é —Ñ–∞–µ—Ä–≤–æ–ª–∞" ;;
            "configuring_docker_resources") echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∏—Å—Ç–µ–º—ã..." ;;
            "system_info") echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:" ;;
            "calculated_resources") echo "üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:" ;;
            "resource_config_saved") echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤" ;;
            "resource_config_loaded") echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑" ;;
            "using_default_resources") echo "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" ;;
            "execution_rpc_error") echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç RPC execution –∫–ª–∏–µ–Ω—Ç–∞" ;;
            "execution_rpc_error_with_details") echo "‚ùå –û—à–∏–±–∫–∞ RPC execution –∫–ª–∏–µ–Ω—Ç–∞: %s" ;;
            "execution_no_result") echo "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç execution –∫–ª–∏–µ–Ω—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ result" ;;
            "consensus_rpc_error") echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç RPC consensus –∫–ª–∏–µ–Ω—Ç–∞" ;;
            "consensus_rpc_error_with_details") echo "‚ùå –û—à–∏–±–∫–∞ RPC consensus –∫–ª–∏–µ–Ω—Ç–∞: %s" ;;
            "consensus_no_data") echo "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç consensus –∫–ª–∏–µ–Ω—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ data" ;;
            "resource_limits_prompt") echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤" ;;
            "resource_limits_description") echo "–°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∏—Å—Ç–µ–º—ã." ;;
            "resource_limits_warning") echo "‚ö†Ô∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã." ;;
            "apply_resource_limits_question") echo "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤? (–¥–∞/–Ω–µ—Ç): " ;;
            "applying_resource_limits") echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤..." ;;
            "resource_limits_applied") echo "‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" ;;
            "skipping_resource_limits") echo "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤..." ;;
            "resource_limits_disabled") echo "‚ÑπÔ∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã" ;;
            "resource_limits_enabled") echo "‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã" ;;
            "please_enter_yes_or_no") echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'" ;;
            *) echo "$key" ;;
        esac
    fi
}

function check_version() {
# === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á VERSION –≤ ~/.env-sepolia-version ===
  # –ï—Å–ª–∏ –∫–ª—é—á–∞ VERSION –≤ .env-sepolia-version –Ω–µ—Ç ‚Äì –¥–æ–ø–∏—Å–∞—Ç—å –µ–≥–æ, –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–≤ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  INSTALLED_VERSION=$(grep '^VERSION=' ~/.env-sepolia-version | cut -d'=' -f2)

  if [ -z "$INSTALLED_VERSION" ]; then
    echo "VERSION=$SCRIPT_VERSION" >> ~/.env-sepolia-version
    INSTALLED_VERSION="$SCRIPT_VERSION"
  elif [ "$INSTALLED_VERSION" != "$SCRIPT_VERSION" ]; then
  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É VERSION –≤ .env-sepolia-version
    sed -i "s/^VERSION=.*/VERSION=$SCRIPT_VERSION/" ~/.env-sepolia-version
    INSTALLED_VERSION="$SCRIPT_VERSION"
  fi

  # === –°–∫–∞—á–∏–≤–∞–µ–º remote version_control.json –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é ===
  REMOTE_VC_URL="https://raw.githubusercontent.com/pittpv/sepolia-auto-install/main/other/version_control.json"
  # –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å JSON, –æ—Ç–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ .[].VERSION, —Å–æ—Ä—Ç–∏—Ä—É–µ–º, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
  if remote_data=$(curl -fsSL "$REMOTE_VC_URL"); then
    REMOTE_LATEST_VERSION=$(echo "$remote_data" | jq -r '.[].VERSION' | sort -V | tail -n1)
  else
    REMOTE_LATEST_VERSION=""
  fi

  # === –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏, –µ—Å–ª–∏ –Ω–∞–¥–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ===
  echo -e "\n${CYAN}$(t "current_script_version") ${INSTALLED_VERSION}${NC}"
  if [ -n "$REMOTE_LATEST_VERSION" ] && [ "$REMOTE_LATEST_VERSION" != "$INSTALLED_VERSION" ]; then
    echo -e "${YELLOW}$(t "new_version_avialable") ${REMOTE_LATEST_VERSION}. $(t "new_version_update").${NC}"
  elif [ -n "$REMOTE_LATEST_VERSION" ]; then
    echo -e "${GREEN}$(t "version_up_to_date")${NC}"
  fi

}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function configure_docker_resources() {
    print_info "\n$(t "configuring_docker_resources")"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    local total_ram_mb=$(free -m | awk 'NR==2{printf "%.0f", $2}')
    local total_ram_gb=$((total_ram_mb / 1024))
    local cpu_cores=$(nproc)
    local cpu_threads=$(nproc --all)

    print_info "\n$(t "system_info")"
    echo "   RAM: ${total_ram_gb}GB (${total_ram_mb}MB)"
    echo "   CPU Cores: ${cpu_cores}"
    echo "   CPU Threads: ${cpu_threads}"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # –û—Å—Ç–∞–≤–ª—è–µ–º 20% —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Ubuntu
    local system_reserve_ram_mb=$((total_ram_mb * 20 / 100))
    local system_reserve_cpu=$((cpu_cores * 20 / 100))

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local available_ram_mb=$((total_ram_mb - system_reserve_ram_mb))
    local available_cpu=$((cpu_cores - system_reserve_cpu))

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –º–µ–∂–¥—É execution –∏ consensus –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    # Execution –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç 60% —Ä–µ—Å—É—Ä—Å–æ–≤, consensus - 40%
    local execution_ram_mb=$((available_ram_mb * 60 / 100))
    local consensus_ram_mb=$((available_ram_mb * 40 / 100))
    local execution_cpu=$((available_cpu * 60 / 100))
    local consensus_cpu=$((available_cpu * 40 / 100))

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
    if [[ $execution_ram_mb -lt 2048 ]]; then
        execution_ram_mb=2048  # –ú–∏–Ω–∏–º—É–º 2GB –¥–ª—è execution –∫–ª–∏–µ–Ω—Ç–∞
    fi
    if [[ $consensus_ram_mb -lt 1024 ]]; then
        consensus_ram_mb=1024  # –ú–∏–Ω–∏–º—É–º 1GB –¥–ª—è consensus –∫–ª–∏–µ–Ω—Ç–∞
    fi
    if [[ $execution_cpu -lt 1 ]]; then
        execution_cpu=1
    fi
    if [[ $consensus_cpu -lt 1 ]]; then
        consensus_cpu=1
    fi

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Docker
    local execution_ram_gb=$(printf "%.1f" $(echo "scale=1; $execution_ram_mb/1024" | bc -l))
    local consensus_ram_gb=$(printf "%.1f" $(echo "scale=1; $consensus_ram_mb/1024" | bc -l))

    print_info "\n$(t "calculated_resources")"
    echo "   System Reserve: ${system_reserve_ram_mb}MB RAM, ${system_reserve_cpu} CPU cores"
    echo "   Execution Client: ${execution_ram_gb}GB RAM, ${execution_cpu} CPU cores"
    echo "   Consensus Client: ${consensus_ram_gb}GB RAM, ${consensus_cpu} CPU cores"

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo ""
    print_info "$(t "resource_limits_prompt")"
    print_info "$(t "resource_limits_description")"
    echo ""
    print_warning "$(t "resource_limits_warning")"
    echo ""

    while true; do
        read -p "$(t "apply_resource_limits_question")" -r user_choice
        case "${user_choice,,}" in
            yes|y|–¥–∞|–¥)
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è - –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                print_info "\n$(t "applying_resource_limits")"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ create_docker_compose
                EXECUTION_MEMORY_LIMIT="${execution_ram_gb}G"
                CONSENSUS_MEMORY_LIMIT="${consensus_ram_gb}G"
                EXECUTION_CPU_LIMIT="${execution_cpu}.0"
                CONSENSUS_CPU_LIMIT="${consensus_cpu}.0"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                local resource_config_file="$NODE_DIR/resource_config.env"
                {
                    echo "EXECUTION_MEMORY_LIMIT=\"$EXECUTION_MEMORY_LIMIT\""
                    echo "CONSENSUS_MEMORY_LIMIT=\"$CONSENSUS_MEMORY_LIMIT\""
                    echo "EXECUTION_CPU_LIMIT=\"$EXECUTION_CPU_LIMIT\""
                    echo "CONSENSUS_CPU_LIMIT=\"$CONSENSUS_CPU_LIMIT\""
                    echo "TOTAL_RAM_GB=\"$total_ram_gb\""
                    echo "CPU_CORES=\"$cpu_cores\""
                    echo "RESOURCE_LIMITS_ENABLED=\"true\""
                } > "$resource_config_file"

                print_success "$(t "resource_config_saved"): $resource_config_file"
                print_success "$(t "resource_limits_applied")"
                break
                ;;
            no|n|–Ω–µ—Ç|–Ω)
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è - –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                print_info "\n$(t "skipping_resource_limits")"

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                EXECUTION_MEMORY_LIMIT=""
                CONSENSUS_MEMORY_LIMIT=""
                EXECUTION_CPU_LIMIT=""
                CONSENSUS_CPU_LIMIT=""

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
                local resource_config_file="$NODE_DIR/resource_config.env"
                {
                    echo "EXECUTION_MEMORY_LIMIT=\"\""
                    echo "CONSENSUS_MEMORY_LIMIT=\"\""
                    echo "EXECUTION_CPU_LIMIT=\"\""
                    echo "CONSENSUS_CPU_LIMIT=\"\""
                    echo "TOTAL_RAM_GB=\"$total_ram_gb\""
                    echo "CPU_CORES=\"$cpu_cores\""
                    echo "RESOURCE_LIMITS_ENABLED=\"false\""
                } > "$resource_config_file"

                print_success "$(t "resource_config_saved"): $resource_config_file"
                print_info "$(t "resource_limits_disabled")"
                break
                ;;
            *)
                print_error "$(t "invalid_choice")"
                print_info "$(t "please_enter_yes_or_no")"
                ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function load_resource_configuration() {
    local resource_config_file="$NODE_DIR/resource_config.env"
    if [[ -f "$resource_config_file" ]]; then
        source "$resource_config_file"
        print_success "\n$(t "resource_config_loaded"): $resource_config_file"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        if [[ "${RESOURCE_LIMITS_ENABLED:-true}" == "true" ]] && [[ -n "$EXECUTION_MEMORY_LIMIT" ]]; then
            print_info "$(t "resource_limits_enabled")"
        else
            print_info "$(t "resource_limits_disabled")"
        fi
    else
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
        EXECUTION_MEMORY_LIMIT=""
        CONSENSUS_MEMORY_LIMIT=""
        EXECUTION_CPU_LIMIT=""
        CONSENSUS_CPU_LIMIT=""
        RESOURCE_LIMITS_ENABLED="false"
        print_info "\n$(t "using_default_resources")"
    fi
}

# Rest of the script remains the same, just replace all echo messages with t function calls
# For example:
# print_info "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è jwt.hex..." becomes print_info "$(t "jwt_gen")"
# print_success "‚úÖ –í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: $client" becomes print_success "$(t "client_selected" "$client")"

NODE_DIR="/root/sepolia-node"
DOCKER_COMPOSE_FILE="$NODE_DIR/docker-compose.yml" # This one remains unchanged as per instructions
JWT_FILE="$NODE_DIR/jwt.hex"
CLIENT_FILE="$NODE_DIR/client"
EXECUTION_CLIENT_FILE="$NODE_DIR/execution_client"
AGENT_SCRIPT="$NODE_DIR/cron_agent.sh"

function print_info {
  echo -e "${CYAN}$1${RESET}"
}

function print_success {
  echo -e "${GREEN}$1${RESET}"
}

function print_warning {
  echo -e "${YELLOW}$1${RESET}"
}

function print_error {
  echo -e "${RED}$1${RESET}"
}

function generate_jwt {
  print_info "$(t "jwt_gen")"
  mkdir -p "$NODE_DIR"
  head -c 32 /dev/urandom | od -An -tx1 | tr -d ' \n' > "$JWT_FILE"
}

function ask_for_custom_ports {
  load_port_configuration # Load existing config first
  print_info "\n$(t "ask_custom_ports_prompt")"
  read -r custom_ports_choice
  if [[ "${custom_ports_choice,,}" == "yes" || "${custom_ports_choice,,}" == "y" || "${custom_ports_choice,,}" == "–¥–∞" || "${custom_ports_choice,,}" == "–¥" ]]; then
    # Helper function for validated port input
    get_validated_port() {
    local prompt_key="$1"
    local default_value="$2"
    local current_value=""

    while true; do
        local prompt=$(t "$prompt_key" "$default_value")
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
        prompt=${prompt//$'\n'/}
        prompt=${prompt//$'\r'/}

        read -r -p "$prompt" user_input

        if [[ -z "$user_input" ]]; then
            current_value="$default_value"
            break
        elif [[ "$user_input" =~ ^[0-9]+$ && "$user_input" -ge 1024 && "$user_input" -le 65535 ]]; then
            current_value="$user_input"
            break
        else
            print_error "$(t "invalid_port_input")"
        fi
    done

    echo "$current_value"
}

    EXECUTION_RPC_PORT=$(get_validated_port "enter_exec_rpc_port" "$EXECUTION_RPC_PORT_DEFAULT")
    EXECUTION_P2P_PORT=$(get_validated_port "enter_exec_p2p_port" "$EXECUTION_P2P_PORT_DEFAULT")
    EXECUTION_AUTH_RPC_PORT=$(get_validated_port "enter_exec_auth_port" "$EXECUTION_AUTH_RPC_PORT_DEFAULT")
    CONSENSUS_RPC_PORT=$(get_validated_port "enter_consensus_rpc_port" "$CONSENSUS_RPC_PORT_DEFAULT")
    CONSENSUS_P2P_PORT=$(get_validated_port "enter_consensus_p2p_port" "$CONSENSUS_P2P_PORT_DEFAULT")
  fi

  mkdir -p "$NODE_DIR"
  local port_config_file="$NODE_DIR/port_config.env"
  print_info "$(t "saving_port_config")"
  {
    echo "EXECUTION_RPC_PORT=\"$EXECUTION_RPC_PORT\""
    echo "EXECUTION_P2P_PORT=\"$EXECUTION_P2P_PORT\""
    echo "EXECUTION_AUTH_RPC_PORT=\"$EXECUTION_AUTH_RPC_PORT\""
    echo "CONSENSUS_RPC_PORT=\"$CONSENSUS_RPC_PORT\""
    echo "CONSENSUS_P2P_PORT=\"$CONSENSUS_P2P_PORT\""
  } > "$port_config_file"
  print_success "$(t "port_config_saved" "$port_config_file")"

  print_success "$(t "ports_configured_message" "$EXECUTION_RPC_PORT" "$EXECUTION_P2P_PORT" "$EXECUTION_AUTH_RPC_PORT" "$CONSENSUS_RPC_PORT" "$CONSENSUS_P2P_PORT")"
}


function load_port_configuration {
  local port_config_file="$NODE_DIR/port_config.env"
  print_info "\n$(t "loading_port_config")"
  if [[ -f "$port_config_file" ]]; then
    # Temporarily disable errexit if set, to prevent script exit if source fails (e.g. bad file)
    local prev_opts=""
    if [[ $- == *e* ]]; then
      prev_opts=$(set +o | grep errexit)
      set +e
    fi

    source "$port_config_file"

    # Restore errexit if it was previously set
    if [[ -n "$prev_opts" ]]; then
      set -o errexit
    fi
    print_success "$(t "loaded_port_config_from_file" "$port_config_file")"
	print_info "\n$(t "current_port_config" "$EXECUTION_RPC_PORT" "$EXECUTION_P2P_PORT" "$EXECUTION_AUTH_RPC_PORT" "$CONSENSUS_RPC_PORT" "$CONSENSUS_P2P_PORT")"
  else
    print_info "$(t "port_config_not_found" "$port_config_file")"
  fi
}

function choose_consensus_client {
  mkdir -p "$NODE_DIR"

  local options=("prysm" "teku" "lighthouse")
  local labels=(
    "$(t "client_label_prysm")"
    "$(t "client_label_teku")"
    "$(t "client_label_lighthouse")"
  )

  PS3="$(t "choose_client")"$'\n> '
  select opt_label in "${labels[@]}"; do
    case $REPLY in
      1|2|3)
        local selected="${options[$((REPLY-1))]}"
        echo "$selected" > "$CLIENT_FILE"
        print_success "$(t "client_selected" "$selected")"
        return
        ;;
      *) print_error "$(t "invalid_choice")" ;;
    esac
  done
}

function choose_execution_client {
  mkdir -p "$NODE_DIR"

  local options=("geth" "reth" "nethermind")
  local labels=(
    "$(t "client_label_geth")"
    "$(t "client_label_reth")"
    "$(t "client_label_nethermind")"
  )

  PS3="$(t "choose_execution_client_prompt")"$'\n> '
  select opt_label in "${labels[@]}"; do
    case $REPLY in
      1|2|3)
        local selected="${options[$((REPLY-1))]}"
        echo "$selected" > "$EXECUTION_CLIENT_FILE"
        print_success "$(t "execution_client_selected" "$selected")"
        return
        ;;
      *) print_error "$(t "invalid_choice")" ;;
    esac
  done
}

function install_requirements {
  cd $HOME

  print_info "$(t "update_base")"
  sudo apt update -y && sudo apt upgrade -y
  sudo apt install screen curl git jq nano gnupg build-essential ca-certificates wget lz4 gcc make lsb-release software-properties-common apt-transport-https iptables automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip -y

  if ! command -v docker &> /dev/null; then
    print_info "$(t "install_docker")"
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
  else
    print_info "$(t "docker_exists")"
  fi

  if ! command -v docker-compose &> /dev/null; then
    print_info "$(t "install_compose")"
    sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  else
    print_info "$(t "compose_exists")"
  fi

  print_info "$(t "autoremove_clean")"
  sudo apt autoremove -y && sudo apt clean

  echo ""
  print_success "$(t "requirements_done")"
}

function create_docker_compose {
  local consensus_client=$(cat "$CLIENT_FILE" 2>/dev/null || echo "")
  if [[ -z "$consensus_client" ]]; then
    print_error "$(t "unknown_client" "$consensus_client")" # This uses the consensus client variable name for now
    exit 1
  fi

  local execution_client=$(cat "$EXECUTION_CLIENT_FILE" 2>/dev/null || echo "geth")
  local execution_client_image=""
  local execution_client_container_name=""
  local execution_client_volumes=""
  local execution_client_ports="[\"8545:8545\", \"30303:30303\", \"8551:8551\"]" # Common ports
  local execution_client_command=""
  local execution_client_data_dir_name="" # This will store just the client name like "geth", "reth"
  # local execution_client_data_path_base="$NODE_DIR/execution" # Base path for execution data - REMOVED

  # mkdir -p "$NODE_DIR/config" "$execution_client_data_path_base" "$NODE_DIR/consensus" # REMOVED - Assuming $NODE_DIR is created by install_node
  # Individual client data dirs (e.g. $NODE_DIR/geth) will be implicitly created by Docker if not existing, or can be added here if strict creation is needed before compose.
  # For this reversion, we'll rely on docker-compose to create them or ensure `install_node` handles $NODE_DIR.

  case $execution_client in
    geth)
      execution_client_image="ethereum/client-go:stable"
      execution_client_container_name="geth"
      execution_client_data_dir_name="geth" # Keep this as the client name itself
      execution_client_command="      --sepolia
      --datadir=/data
      --http
      --http.addr=0.0.0.0
      --http.api=eth,web3,net,engine
      --http.port=$EXECUTION_RPC_PORT
      --port=$EXECUTION_P2P_PORT
      --authrpc.addr=0.0.0.0
      --authrpc.port=$EXECUTION_AUTH_RPC_PORT
      --authrpc.jwtsecret=/jwt.hex
      --authrpc.vhosts=*
      --http.corsdomain=\"*\"
      --syncmode=snap
      --rpc.txfeecap 0
      --cache=4096"
      ;;
    reth)
      execution_client_image="ghcr.io/paradigmxyz/reth:latest"
      execution_client_container_name="reth"
      execution_client_data_dir_name="reth" # Keep this as the client name itself
      execution_client_command="      node
      --chain=sepolia
      --datadir=/data
      --http
      --http.port=$EXECUTION_RPC_PORT
      --http.api=eth,net,web3,rpc,debug
      --http.addr=0.0.0.0
      --authrpc.addr=0.0.0.0
      --authrpc.port=$EXECUTION_AUTH_RPC_PORT
      --authrpc.jwtsecret=/jwt.hex
      --metrics=0.0.0.0:9090"
      ;;
    nethermind)
      execution_client_image="nethermind/nethermind:latest"
      execution_client_container_name="nethermind"
      execution_client_data_dir_name="nethermind" # Keep this as the client name itself
      execution_client_command="      --config=sepolia
      --datadir=/data
      --Sync.SnapSync=true
      --JsonRpc.Enabled=true
      --JsonRpc.Host=0.0.0.0
      --JsonRpc.Port=$EXECUTION_RPC_PORT
      --Network.DiscoveryPort=$EXECUTION_P2P_PORT
      --Network.P2PPort=$EXECUTION_P2P_PORT
      --JsonRpc.EnabledModules=[debug,eth,web3,net]
      --JsonRpc.EngineHost=0.0.0.0
      --JsonRpc.EnginePort=$EXECUTION_AUTH_RPC_PORT
      --JsonRpc.EngineEnabledModules=[Engine,Eth,Subscribe,Web3]
      --JsonRpc.JwtSecretFile=/jwt.hex
      --Metrics.Enabled=true
      --Metrics.ExposePort=9090
      --HealthChecks.Enabled=true"
      ;;
    *)
      print_warning "$(t "unknown_execution_client" "$execution_client")"
      # Default to Geth
      execution_client="geth"
      execution_client_image="ethereum/client-go:stable"
      execution_client_container_name="geth"
      execution_client_data_dir_name="geth"
      execution_client_command="      --sepolia
      --datadir=/data
      --http
      --http.addr=0.0.0.0
      --http.api=eth,web3,net,engine
      --http.port=$EXECUTION_RPC_PORT
      --port=$EXECUTION_P2P_PORT
      --authrpc.addr=0.0.0.0
      --authrpc.port=$EXECUTION_AUTH_RPC_PORT
      --authrpc.jwtsecret=/jwt.hex
      --authrpc.vhosts=*
      --http.corsdomain=\"*\"
      --syncmode=snap
      --rpc.txfeecap 0
      --cache=4096"
      ;;
  esac

  # mkdir -p "$execution_client_data_path_base/$execution_client_data_dir_name" # REMOVED

  # Reverted to simple, non-conditional volume definition
  # execution_client_volumes="- $NODE_DIR/$execution_client_data_dir_name:/data\n      - $JWT_FILE:/jwt.hex" # REMOVED

  print_info "$(t "creating_compose" "$consensus_client / $execution_client")"
  cat > "$DOCKER_COMPOSE_FILE" <<EOF
services:
  $execution_client_container_name:
    image: $execution_client_image
    container_name: $execution_client_container_name
    restart: unless-stopped
EOF

  # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
  if [[ "${RESOURCE_LIMITS_ENABLED:-true}" == "true" ]] && [[ -n "$EXECUTION_MEMORY_LIMIT" ]]; then
    cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    deploy:
      resources:
        limits:
          memory: ${EXECUTION_MEMORY_LIMIT:-4G}
          cpus: '${EXECUTION_CPU_LIMIT:-2.0}'
        reservations:
          memory: ${EXECUTION_MEMORY_LIMIT:-4G}
          cpus: '${EXECUTION_CPU_LIMIT:-2.0}'
EOF
  fi

  cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    volumes:
      - $NODE_DIR/$execution_client_data_dir_name:/data
      - $JWT_FILE:/jwt.hex
    ports:
      - "$EXECUTION_RPC_PORT:$EXECUTION_RPC_PORT"
      - "$EXECUTION_P2P_PORT:$EXECUTION_P2P_PORT/tcp"
      - "$EXECUTION_P2P_PORT:$EXECUTION_P2P_PORT/udp"
      - "$EXECUTION_AUTH_RPC_PORT:$EXECUTION_AUTH_RPC_PORT"
    command:
${execution_client_command}
EOF

  local consensus_execution_endpoint="http://$execution_client_container_name:$EXECUTION_AUTH_RPC_PORT"

  case $consensus_client in
    lighthouse)
      # mkdir -p "$NODE_DIR/consensus/lighthouse" # REMOVED
      cat >> "$DOCKER_COMPOSE_FILE" <<EOF

  lighthouse:
    image: sigp/lighthouse:latest
    container_name: lighthouse
    restart: unless-stopped
EOF

      # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
      if [[ "${RESOURCE_LIMITS_ENABLED:-true}" == "true" ]] && [[ -n "$CONSENSUS_MEMORY_LIMIT" ]]; then
        cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    deploy:
      resources:
        limits:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
EOF
      fi

      cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    volumes:
      - $NODE_DIR/lighthouse:/root/.lighthouse
      - $JWT_FILE:/root/jwt.hex
    depends_on:
      - $execution_client_container_name
    ports:
      - "$CONSENSUS_RPC_PORT:$CONSENSUS_RPC_PORT"
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/tcp"
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/udp"
    command:
      lighthouse bn
      --network sepolia
      --execution-endpoint=$consensus_execution_endpoint
      --execution-jwt=/root/jwt.hex
      --checkpoint-sync-url=https://sepolia.checkpoint-sync.ethpandaops.io
      --http
      --http-address=0.0.0.0
      --listen-address=0.0.0.0
      --http-port=$CONSENSUS_RPC_PORT
      --enr-address=$(curl -s https://ip4only.me/api/ | cut -d',' -f2)
      --enr-tcp-port=$CONSENSUS_P2P_PORT
      --enr-udp-port=$CONSENSUS_P2P_PORT
      --discovery-port=$CONSENSUS_P2P_PORT

EOF
      ;;
    prysm)
      # mkdir -p "$NODE_DIR/consensus/prysm" # REMOVED
      cat >> "$DOCKER_COMPOSE_FILE" <<EOF

  prysm:
    image: gcr.io/prysmaticlabs/prysm/beacon-chain:stable
    container_name: prysm
    restart: unless-stopped
EOF

      # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
      if [[ "${RESOURCE_LIMITS_ENABLED:-true}" == "true" ]] && [[ -n "$CONSENSUS_MEMORY_LIMIT" ]]; then
        cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    deploy:
      resources:
        limits:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
EOF
      fi

      cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    volumes:
      - $NODE_DIR/prysm:/data
      - $JWT_FILE:/jwt.hex
    depends_on:
      - $execution_client_container_name
    ports:
      - "$CONSENSUS_RPC_PORT:$CONSENSUS_RPC_PORT"
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/tcp"
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/udp"
    command:
      --sepolia
      --datadir=/data
      --execution-endpoint=$consensus_execution_endpoint
      --jwt-secret=/jwt.hex
      --accept-terms-of-use
      --checkpoint-sync-url=https://sepolia.checkpoint-sync.ethpandaops.io
      --grpc-gateway-port=$CONSENSUS_RPC_PORT
      --grpc-gateway-host=0.0.0.0
EOF
      ;;
    teku)
      mkdir -p "$NODE_DIR/teku/logs"
      mkdir -p "$NODE_DIR/teku/validator/slashprotection"
      mkdir -p "$NODE_DIR/teku/beacon"
      chmod -R 777 "$NODE_DIR/teku/beacon"
      chmod -R 777 "$NODE_DIR/teku/validator"
      chmod -R 777 "$NODE_DIR/teku/logs"
      cat >> "$DOCKER_COMPOSE_FILE" <<EOF

  teku:
    image: consensys/teku:latest
    container_name: teku
    restart: unless-stopped
EOF

      # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
      if [[ "${RESOURCE_LIMITS_ENABLED:-true}" == "true" ]] && [[ -n "$CONSENSUS_MEMORY_LIMIT" ]]; then
        cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    deploy:
      resources:
        limits:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${CONSENSUS_MEMORY_LIMIT:-2G}
          cpus: '${CONSENSUS_CPU_LIMIT:-1.0}'
EOF
      fi

      cat >> "$DOCKER_COMPOSE_FILE" <<EOF
    volumes:
      - $NODE_DIR/teku:/data
      - $JWT_FILE:/jwt.hex
    depends_on:
      - $execution_client_container_name
    ports:
      - "$CONSENSUS_RPC_PORT:$CONSENSUS_RPC_PORT"
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/tcp"   # P2P TCP
      - "$CONSENSUS_P2P_PORT:$CONSENSUS_P2P_PORT/udp"   # P2P UDP
    command:
      --network=sepolia
      --data-path=/data
      --ee-endpoint=$consensus_execution_endpoint
      --ee-jwt-secret-file=/jwt.hex
      --checkpoint-sync-url=https://sepolia.checkpoint-sync.ethpandaops.io
      --rest-api-enabled=true
      --rest-api-interface=0.0.0.0
      --rest-api-port=$CONSENSUS_RPC_PORT
      --rest-api-host-allowlist=*
      --p2p-port=$CONSENSUS_P2P_PORT
      --p2p-advertised-ip=$(curl -s https://ip4only.me/api/ | cut -d',' -f2)
      --metrics-enabled=true
      --metrics-port=8008
      --metrics-host-allowlist=*
EOF
      ;;
    *)
      # This was already handled for consensus_client at the beginning of the function
      print_error "$(t "unknown_client" "$consensus_client")"
      exit 1
      ;;
  esac
}

function install_node {
  print_info "$(t "node_install")"
  mkdir -p "$NODE_DIR"
  ask_for_custom_ports # Call the new function here
  choose_execution_client
  choose_consensus_client
  generate_jwt
  configure_docker_resources # Configure resources based on system specs
  load_resource_configuration # Load resource configuration
  create_docker_compose
  if [[ ! -f "$JWT_FILE" ]]; then
    print_error "$(t "jwt_not_found_error" "$JWT_FILE")"
    exit 1
  fi
  docker compose -f "$DOCKER_COMPOSE_FILE" up -d
  print_success "$(t "node_installed")"
  echo -e "${BLUE}RPC:${RESET}      http://$(curl -s https://ip4only.me/api/ | cut -d',' -f2):$EXECUTION_RPC_PORT"
  echo -e "${BLUE}BEACON:${RESET}   http://$(curl -s https://ip4only.me/api/ | cut -d',' -f2):$CONSENSUS_RPC_PORT"
}

function view_logs {
  local execution_client_name=$(cat "$EXECUTION_CLIENT_FILE" 2>/dev/null || echo "geth")
  local consensus_client_name=$(cat "$CLIENT_FILE" 2>/dev/null || echo "lighthouse")

  # Capitalize first letter for display
  local display_execution_client_name="${execution_client_name^}"
  local display_consensus_client_name="${consensus_client_name^}"

  print_info "$(t "select_logs")"
  select opt in "$display_execution_client_name" "$display_consensus_client_name" "$(t "back")"; do
    case $REPLY in
      1) docker logs --tail 500 -f "$execution_client_name"; break ;;
      2) docker logs --tail 500 -f "$consensus_client_name"; break ;;
      3) break ;;
      *) print_error "$(t "invalid_option")";;
    esac
  done
}

function hex_to_dec() {
  printf "%d\n" "$((16#${1#0x}))"
}

function format_time() {
  local seconds=$1
  local h=$((seconds / 3600))
  local m=$(((seconds % 3600) / 60))
  local s=$((seconds % 60))
  if [[ "$lang" == "en" ]]; then
    printf "%02dh %02dm %02ds" $h $m $s
  else
    printf "%02d—á %02d–º %02d—Å" $h $m $s
  fi
}

function check_sync {
  local consensus_client_name=$(cat "$CLIENT_FILE" 2>/dev/null || echo "prysm")
  local execution_client_name=$(cat "$EXECUTION_CLIENT_FILE" 2>/dev/null || echo "geth")
  local display_execution_client_name="${execution_client_name^}"

  print_info "\n$(t "check_sync")"
  print_info "\n$(t "execution" "$display_execution_client_name")"

  local sync_data=$(curl -s -X POST "http://localhost:$EXECUTION_RPC_PORT" -H 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}')

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RPC
  if [[ -z "$sync_data" ]] || ! echo "$sync_data" | jq -e . >/dev/null 2>&1; then
    echo "$(t "execution_rpc_error")"
    return
  fi

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
  if echo "$sync_data" | jq -e '.error != null' >/dev/null 2>&1; then
    local error_msg=$(echo "$sync_data" | jq -r '.error.message // "Unknown error"')
    echo "$(t "execution_rpc_error_with_details" "$error_msg")"
    return
  fi

  # –ï—Å–ª–∏ result == false, —Ç–æ –Ω–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if echo "$sync_data" | jq -e '.result == false' >/dev/null 2>&1; then
    echo "$(t "execution_synced" "$display_execution_client_name")"
  else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ false
    if ! echo "$sync_data" | jq -e '.result' >/dev/null 2>&1; then
      echo "$(t "execution_no_result")"
      return
    fi

    if [[ "$execution_client_name" == "geth" ]]; then
      # –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ –¥–ª—è Geth
      local current=$(echo "$sync_data" | jq -r '.result.currentBlock // .result.syncing.currentBlock // .result.syncingData.currentBlock // empty')
      local highest=$(echo "$sync_data" | jq -r '.result.highestBlock // .result.syncing.highestBlock // .result.syncingData.highestBlock // empty')

      if [[ -z "$current" || -z "$highest" || "$current" == "null" || "$highest" == "null" ]]; then
        echo "$(t "sync_data_missing")"
        return
      fi

      local current_dec=$((16#${current:2}))
      local highest_dec=$((16#${highest:2}))

      if [[ $highest_dec -eq 0 ]]; then
        echo "$(t "sync_data_invalid")"
      else
        local remaining=$((highest_dec - current_dec))
        local progress=$((100 * current_dec / highest_dec))
        echo "$(t "syncing" "$display_execution_client_name")"
        echo "$(t "current_block" "$current_dec")"
        echo "$(t "target_block" "$highest_dec")"
        echo "$(t "blocks_left" "$remaining")"
        echo "$(t "progress" "$progress")"

        echo "$(t "sync_speed")"
        sleep 5
        local sync_data2=$(curl -s -X POST "http://localhost:$EXECUTION_RPC_PORT" -H 'Content-Type: application/json' \
          --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}')
        local current2=$(echo "$sync_data2" | jq -r '.result.currentBlock // .result.syncing.currentBlock // .result.syncingData.currentBlock // empty')
        local current2_dec=$((16#${current2:2}))

        local delta_blocks=$((current2_dec - current_dec))
        local speed_bps=0
        if [[ $delta_blocks -gt 0 ]]; then
          speed_bps=$((delta_blocks / 5))
        fi

        echo "$(t "speed" "$speed_bps")"

        if [[ $speed_bps -gt 0 ]]; then
          local est_sec=$((remaining / speed_bps))
          echo "$(t "eta" "$(format_time $est_sec)")"
        else
          echo "$(t "low_speed")"
        fi
      fi

    elif [[ "$execution_client_name" == "reth" ]]; then
      # –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è Reth —á–µ—Ä–µ–∑ stages
      echo "$(t "syncing" "$display_execution_client_name")"
      echo ""
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ stages –≤ –æ—Ç–≤–µ—Ç–µ
      local stages_exist=$(echo "$sync_data" | jq '.result.stages? != null')
      if [[ "$stages_exist" != "true" ]]; then
        echo "$(t "reth_no_stages")"
        return
      fi

      local execution_block=0
      local bodies_block=0
      local headers_block=0
      local highest_block_hex=$(echo "$sync_data" | jq -r '.result.highestBlock')
      local highest_block_dec=0
      if [[ "$highest_block_hex" =~ ^0x[0-9a-fA-F]+$ ]]; then
        highest_block_dec=$((16#${highest_block_hex:2}))
      fi

      local stages_json=$(echo "$sync_data" | jq -c '.result.stages[]')

      # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤—Å–µ—Ö stages
      declare -A stage_blocks

      while IFS= read -r stage; do
        local name=$(echo "$stage" | jq -r '.name')
        local block_hex=$(echo "$stage" | jq -r '.block')
        local block_dec=0
        if [[ "$block_hex" =~ ^0x[0-9a-fA-F]+$ ]]; then
          block_dec=$((16#${block_hex:2}))
        fi

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö stages
        if [[ "$name" == "Execution" ]]; then
          execution_block=$block_dec
        elif [[ "$name" == "Bodies" ]]; then
          bodies_block=$block_dec
        elif [[ "$name" == "Headers" ]]; then
          headers_block=$block_dec
        fi

        stage_blocks["$name"]=$block_dec

      done <<< "$stages_json"

      # ‚îÄ‚îÄ‚îÄ –í—Å–µ stages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      for stage_name in  "Headers" "Bodies" "SenderRecovery" "Execution" "AccountHashing" "StorageHashing" "MerkleUnwind" "MerkleExecute" "TransactionLookup" "IndexAccountHistory" "IndexStorageHistory" "PruneSenderRecovery" "Prune" "Finish"; do
        local block=${stage_blocks[$stage_name]:-0}
        if [[ $headers_block -gt 0 ]]; then
            local percent=$((100 * block / headers_block))
            if [[ $percent -eq 0 ]]; then
                echo "‚ö†Ô∏è $stage_name $(t sync_progress_process) $block $(t sync_progress_not_valid)"
            else
                print_success "üßÆ $stage_name $(t sync_progress_process) $block / $headers_block = $percent%"
            fi
        else
            echo "‚ö†Ô∏è $stage_name $(t sync_progress_process) $block $(t sync_progress_not_valid)"
        fi
      done

    elif [[ "$execution_client_name" == "nethermind" ]]; then
      # Initial Full Sync Check (eth_syncing)
      if echo "$sync_data" | jq -e '.result == false' >/dev/null 2>&1; then
        echo "$(t "nethermind_synced_fully")"
      fi

      echo ""
      echo "$(t nethermind_sync_stage_title)"

      local stage_rpc_payload='{"jsonrpc":"2.0","id":0,"method":"debug_getSyncStage","params":[]}'
      local stage_data=$(curl -s -X POST "http://localhost:$EXECUTION_RPC_PORT" \
                    -H 'Content-Type: application/json' --data "$stage_rpc_payload")

      if [[ -n "$stage_data" ]] && \
         echo "$stage_data" | jq -e '.error == null and .result != null' >/dev/null; then
          stage_name_display=$(echo "$stage_data" | jq -r '.result.currentStage // "N/A"')
          printf "%s\n" "$(t nethermind_current_stage "$stage_name_display")"
      elif echo "$stage_data" | jq -e '.error != null' >/dev/null; then
          error_message=$(echo "$stage_data" | jq -r '.error.message // "Unknown RPC error"')
          printf "%s\n" "$(t nethermind_rpc_error "debug_getSyncStage") Details: $error_message"
      else
          printf "%s\n" "$(t nethermind_rpc_error "debug_getSyncStage") Details: Empty or invalid response"
      fi

      # Block Sync Progress (from eth_syncing data, only if not reported as fully synced by eth_syncing)
      if ! (echo "$sync_data" | jq -e '.result == false' >/dev/null 2>&1); then
        echo ""
        echo "$(t "nethermind_block_progress_title")"
        local current_hex=$(echo "$sync_data" | jq -r '.result.currentBlock // empty')
        local highest_hex=$(echo "$sync_data" | jq -r '.result.highestBlock // empty')

        if [[ -z "$current_hex" || "$current_hex" == "null" || -z "$highest_hex" || "$highest_hex" == "null" ]]; then
          echo "$(t "nethermind_sync_data_missing")"
        else
          local current_dec=$(hex_to_dec "$current_hex")
          local highest_dec=$(hex_to_dec "$highest_hex")

          if [[ $highest_dec -eq 0 && $current_dec -gt 0 ]]; then
            echo "$(t "sync_data_invalid")"
          elif [[ $highest_dec -eq 0 && $current_dec -eq 0 && "$stage_name_display" != "Finished" && "$stage_name_display" != "SnapSync" && "$stage_name_display" != "FastSync" && "$stage_name_display" != "FullSync" && "$stage_name_display" != "N/A" ]] ; then
            echo "$(t "nethermind_sync_data_missing")"
          elif [[ $highest_dec -ge $current_dec ]]; then
            local remaining=$((highest_dec - current_dec))
            local progress_pct=0
            if [[ $highest_dec -gt 0 ]]; then
                if [[ $current_dec -ge $highest_dec ]]; then
                    progress_pct=100
                else
                    progress_pct=$((current_dec * 100 / highest_dec))
                fi
            elif [[ $current_dec -gt 0 ]]; then
                 progress_pct=0
            fi

            echo "$(t "current_block" "$current_dec")"
            echo "$(t "target_block" "$highest_dec")"
            echo "$(t "blocks_left" "$remaining")"
            echo "$(t "progress" "$progress_pct")"
          else
             echo "$(t "execution_synced" "$display_execution_client_name")"
          fi
        fi
      fi

      # --- Health Status Check -----------------------------------------------
      echo ""
      echo "$(t nethermind_health_status_title)"

      local health_output
      local health_status_overall="Unknown"
      local health_details_str=""

      health_output=$(curl -s -X GET "http://localhost:$EXECUTION_RPC_PORT/health" -H 'Content-Type: application/json')

      if [[ -n "$health_output" ]]; then
        if echo "$health_output" | jq -e '.status' >/dev/null 2>&1; then
          health_status_overall=$(echo "$health_output" | jq -r '.status')
        elif ! echo "$health_output" | jq -e . >/dev/null 2>&1; then
          health_status_overall="$health_output"
          health_details_str="$health_output"
        fi

        if [[ -z "$health_details_str" ]]; then
          if echo "$health_output" | jq -e . >/dev/null 2>&1; then
            health_details_str=$(echo "$health_output" | jq '.')
          else
            health_details_str="$health_output"
          fi
        fi

        printf "$(t nethermind_health_info)\n" "$health_status_overall" "$health_details_str"
      else
        printf "$(t nethermind_health_info)\n" "Unknown" "$(t nethermind_health_request_failed)"
      fi

    else
      echo "‚ö†Ô∏è $(t "unknown_execution_client" "$execution_client_name"). $(t "sync_check_basic")"
      echo "$sync_data" | jq '.result'
    fi
  fi

  echo ""
  echo "$(t "consensus" "$consensus_client_name")"

  case "$consensus_client_name" in
    prysm|teku)
      local syncing_resp=$(curl -s "http://localhost:$CONSENSUS_RPC_PORT/eth/v1/node/syncing")

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
      if [[ -z "$syncing_resp" ]] || ! echo "$syncing_resp" | jq -e . >/dev/null 2>&1; then
        echo "$(t "consensus_rpc_error")"
        return
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
      if echo "$syncing_resp" | jq -e '.code != null' >/dev/null 2>&1; then
        local error_msg=$(echo "$syncing_resp" | jq -r '.message // "Unknown error"')
        echo "$(t "consensus_rpc_error_with_details" "$error_msg")"
        return
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if ! echo "$syncing_resp" | jq -e '.data' >/dev/null 2>&1; then
        echo "$(t "consensus_no_data")"
        return
      fi

      if [[ "$syncing_resp" == "{}" || "$(echo "$syncing_resp" | jq -r '.data')" == "null" ]]; then
        echo "$(t "${consensus_client_name}_no_sync_data")"
        local fin_resp=$(curl -s "http://localhost:$CONSENSUS_RPC_PORT/eth/v1/node/finality")
        if [[ -z "$fin_resp" ]]; then
          fin_resp=$(curl -s "http://localhost:$CONSENSUS_RPC_PORT/eth/v1/beacon/states/head/finality_checkpoints")
        fi
        if [[ -n "$fin_resp" ]] && echo "$fin_resp" | jq -e . >/dev/null 2>&1; then
          echo "$(t "${consensus_client_name}_beacon_active")"
          echo "$fin_resp" | jq
        else
          echo "$(t "${consensus_client_name}_no_finality")"
        fi
      else
        echo "$syncing_resp" | jq
        local is_syncing=$(echo "$syncing_resp" | jq -r '.data.is_syncing')
        if [[ "$is_syncing" == "false" ]]; then
          echo "$(t "${consensus_client_name}_synced")"
        else
          echo "$(t "${consensus_client_name}_syncing")"
        fi
      fi
      ;;

    lighthouse)
      local syncing_resp=$(curl -s "http://localhost:$CONSENSUS_RPC_PORT/eth/v1/node/syncing")

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
      if [[ -z "$syncing_resp" ]] || ! echo "$syncing_resp" | jq -e . >/dev/null 2>&1; then
        echo "$(t "consensus_rpc_error")"
        return
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
      if echo "$syncing_resp" | jq -e '.code != null' >/dev/null 2>&1; then
        local error_msg=$(echo "$syncing_resp" | jq -r '.message // "Unknown error"')
        echo "$(t "consensus_rpc_error_with_details" "$error_msg")"
        return
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if ! echo "$syncing_resp" | jq -e '.data' >/dev/null 2>&1; then
        echo "$(t "consensus_no_data")"
        return
      fi

      if [[ "$syncing_resp" == "{}" || "$(echo "$syncing_resp" | jq -r '.data')" == "null" ]]; then
        echo "$(t "lighthouse_no_sync_data")"
      else
        echo "$syncing_resp" | jq
        local is_syncing=$(echo "$syncing_resp" | jq -r '.data.is_syncing')
        if [[ "$is_syncing" == "false" ]]; then
          echo "$(t "lighthouse_synced")"
        else
          echo "$(t "lighthouse_syncing")"
        fi
      fi
      ;;

    *)
      echo "$(t "unknown_client" "$consensus_client_name")"
      ;;
  esac
}

function setup_cron_agent {
  local consensus_client_name=$(cat "$CLIENT_FILE" 2>/dev/null || echo "prysm") # Default to prysm if not set
  local consensus_client_display_name="${consensus_client_name^}"
  local execution_client_name_cron=$(cat "$EXECUTION_CLIENT_FILE" 2>/dev/null || echo "geth")
  local execution_client_display_name_cron="${execution_client_name_cron^}"

  # Function to validate Telegram bot token
  validate_telegram_token() {
    local token=$1
    if [[ ! "$token" =~ ^[0-9]+:[a-zA-Z0-9_-]+$ ]]; then
      return 1
    fi
    # Test token by making API call
    local response=$(curl -s "https://api.telegram.org/bot${token}/getMe")
    if [[ "$response" == *"ok\":true"* ]]; then
      return 0
    else
      return 1
    fi
  }

  # Function to validate Telegram chat ID (updated version)
  validate_telegram_chat() {
    local token=$1
    local chat_id=$2
    # Test chat ID by trying to send a test message
    local response=$(curl -s -X POST "https://api.telegram.org/bot${token}/sendMessage" \
      -d chat_id="${chat_id}" \
      -d text="$(t "chatid_linked")" \
      -d parse_mode="Markdown")

    if [[ "$response" == *"ok\":true"* ]]; then
      return 0
    else
      return 1
    fi
  }

  # Get and validate Telegram bot token
  while true; do
    echo -e "\n${BLUE}$(t "enter_tg_token")${NC}"
    read -p "> " tg_token

    if validate_telegram_token "$tg_token"; then
      break
    else
      echo -e "${RED}$(t "invalid_token")${NC}"
      echo -e "${YELLOW}$(t "token_format")${NC}"
    fi
  done

  # Get and validate Telegram chat ID
  while true; do
    echo -e "\n${BLUE}$(t "enter_tg_chat")${NC}"
    read -p "> " tg_chat_id

    if [[ "$tg_chat_id" =~ ^-?[0-9]+$ ]]; then
      if validate_telegram_chat "$tg_token" "$tg_chat_id"; then
        break
      else
        echo -e "${RED}$(t "invalid_chatid")${NC}"
      fi
    else
      echo -e "${RED}$(t "chatid_number")${NC}"
    fi
  done

  #read -p "$(t "enter_tg_token")" tg_token
  #read -p "$(t "enter_tg_chat")" tg_chat_id

  echo "\n$(t "select_cron")"
  echo "$(t "cron_options")"
  read -p "$(t "select_option")" interval_choice

  case $interval_choice in
    1) cron_schedule="*/5 * * * *" ;;
    2) cron_schedule="*/10 * * * *" ;;
    3) cron_schedule="*/15 * * * *" ;;
    4) cron_schedule="*/30 * * * *" ;;
    5) cron_schedule="0 * * * *" ;;
    *)
      echo "$(t "invalid_interval")"
      cron_schedule="*/10 * * * *"
      ;;
  esac

  mkdir -p "$NODE_DIR" # Ensure the node directory exists
  touch "$AGENT_SCRIPT"
  chmod +x "$AGENT_SCRIPT"

  cat <<EOF > "$AGENT_SCRIPT"
#!/bin/bash
CLIENT="$consensus_client_name" # Consensus client name
CLIENT_DISPLAY_NAME="$consensus_client_display_name"
EXECUTION_CLIENT_NAME="$execution_client_name_cron"
EXECUTION_CLIENT_DISPLAY_NAME="$execution_client_display_name_cron"
TG_TOKEN="$tg_token"
TG_CHAT_ID="$tg_chat_id"

# Check Execution Client
execution_sync_response=\$(curl -s -X POST http://localhost:${EXECUTION_RPC_PORT} \\
  -H "Content-Type: application/json" \\
  -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}')

if echo "\$execution_sync_response" | grep -q '"result":false'; then
  execution_status="‚úÖ \$EXECUTION_CLIENT_DISPLAY_NAME synced"
elif echo "\$execution_sync_response" | grep -q '"result":'; then
  execution_status="‚ö†Ô∏è \$EXECUTION_CLIENT_DISPLAY_NAME syncing in progress"
else
  curl -s -X POST "https://api.telegram.org/bot\$TG_TOKEN/sendMessage" \\
    --data-urlencode "chat_id=\$TG_CHAT_ID" \\
    --data-urlencode "text=‚ùå \$EXECUTION_CLIENT_DISPLAY_NAME not responding or returned invalid data!"
  exit 1
fi

# Check Consensus Client
consensus_response=\$(curl -s http://localhost:${CONSENSUS_RPC_PORT}/eth/v1/node/syncing)
is_syncing=\$(echo "\$consensus_response" | jq -r '.data.is_syncing' 2>/dev/null)

if [ "\$is_syncing" == "false" ]; then
  consensus_status="‚úÖ \$CLIENT_DISPLAY_NAME synced" # CLIENT_DISPLAY_NAME here is consensus_client_name
elif [ "\$is_syncing" == "true" ]; then
  consensus_status="‚ö†Ô∏è \$CLIENT_DISPLAY_NAME syncing in progress" # CLIENT_DISPLAY_NAME here is consensus_client_name
else
  curl -s -X POST "https://api.telegram.org/bot\$TG_TOKEN/sendMessage" \\
    --data-urlencode "chat_id=\$TG_CHAT_ID" \\
    --data-urlencode "text=‚ùå \$CLIENT_DISPLAY_NAME not responding or returned invalid data!" # CLIENT_DISPLAY_NAME here is consensus_client_name
  exit 1
fi

get_ip_address() {
  curl -s https://api.ipify.org || echo "unknown-ip"
}
ip=\$(get_ip_address)

STATUS_MSG="[Sepolia Node Monitor]
üåê Server: \$ip
Execution client: \$execution_status
Consensus client: \$consensus_status"

curl -s -X POST "https://api.telegram.org/bot\$TG_TOKEN/sendMessage" \\
  --data-urlencode "chat_id=\$TG_CHAT_ID" \\
  --data-urlencode "text=\$STATUS_MSG"
EOF


  # Remove old entry if exists
  crontab -l 2>/dev/null | grep -v "$AGENT_SCRIPT" > /tmp/current_cron

  # Add new entry with selected interval
  echo "$cron_schedule $AGENT_SCRIPT" >> /tmp/current_cron
  crontab /tmp/current_cron
  rm /tmp/current_cron

  print_success "$(t "cron_installed" "$cron_schedule")"
}

function remove_cron_agent {
  crontab -l 2>/dev/null | grep -v "$AGENT_SCRIPT" | crontab -
  rm -f "$AGENT_SCRIPT"
  print_success "$(t "cron_removed")"
}

function stop_containers {
  print_info "$(t "stop_containers")"
  if [[ -f "$DOCKER_COMPOSE_FILE" ]]; then
    docker compose -f "$DOCKER_COMPOSE_FILE" down
    print_success "$(t "containers_stopped")"
  else
    print_warning "$(t "no_compose")"
  fi
}

function start_containers {
  print_info "$(t "start_containers")"
  docker compose -f "$DOCKER_COMPOSE_FILE" up -d
  print_success "$(t "containers_started")"
}

function update_node {
  print_info "$(t "node_update")"
  docker compose -f "$DOCKER_COMPOSE_FILE" pull
  stop_containers
  start_containers
  print_success "$(t "node_updated")"
}

function check_disk_usage {
  print_info "$(t "disk_usage")"

  local execution_client_name=$(cat "$EXECUTION_CLIENT_FILE" 2>/dev/null || echo "geth")
  # Determine container name - for Geth, Reth, Nethermind, it's the same as the client name.
  local execution_container_name="$execution_client_name"

  print_info "$(t "execution_client_usage" "$execution_client_name")"
  docker exec -it "$execution_container_name" du -sh /data 2>/dev/null || print_warning "$(t "container_not_running" "$execution_container_name")"

  if [[ -f "$CLIENT_FILE" ]]; then
    local consensus_client_name=$(cat "$CLIENT_FILE")
    print_info "$(t "client_usage" "$consensus_client_name")" # This is for the consensus client
    # Adjust data path based on consensus client if necessary, e.g. lighthouse uses /root/.lighthouse
    local consensus_data_path="/data"
    if [[ "$consensus_client_name" == "lighthouse" ]]; then
      consensus_data_path="/root/.lighthouse"
    fi
    docker exec -it "$consensus_client_name" du -sh "$consensus_data_path" 2>/dev/null || print_warning "$(t "container_not_running" "$consensus_client_name")"
  else
    # This was client_not_found for consensus client, perhaps we don't need a message if EXECUTION_CLIENT_FILE is also missing as it defaults
    print_warning "$(t "client_not_found" "$CLIENT_FILE")"
  fi
}

function delete_node {
  print_warning "$(t "confirm_delete")"
  read -r confirm
  if [[ "$confirm" == "y" ]]; then
    stop_containers
    rm -rf "$NODE_DIR"
    remove_cron_agent
    print_success "$(t "deleted")"
  else
    print_info "$(t "cancelled")"
  fi
}

function change_installed_ports {
  print_warning "\n$(t "updating_ports")"
  echo ""
  ask_for_custom_ports
  echo ""
  load_resource_configuration # Load resource configuration
  create_docker_compose
  print_success "\n$(t "ports_updated")"
  print_warning "\n$(t "restart_required")"
}

function firewall_setup() {

  check_docker_user_chain_ufw() {
      echo -e "${BLUE}$(t "checking_docker_user_chain")${RESET}"

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ DOCKER-USER
      if ! iptables -L DOCKER-USER >/dev/null 2>&1; then
          echo -e "\n${RED}$(t "docker_user_chain_not_found")${RESET}"
          echo -e "\n${YELLOW}$(t "creating_docker_user_chain")${RESET}"
          iptables -N DOCKER-USER
          echo -e "${GREEN}$(t "docker_user_chain_created")${RESET}"

          # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ FORWARD -> DOCKER-USER
          iptables -I FORWARD -j DOCKER-USER
          echo -e "\n${YELLOW}$(t "added_forward_to_docker_user")${RESET}"
      else
          echo -e "${GREEN}$(t "docker_user_chain_available")${RESET}"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ FORWARD -> DOCKER-USER
          if ! iptables -L FORWARD | grep -q "DOCKER-USER"; then
              echo -e "\n${YELLOW}$(t "adding_forward_to_docker_user")${RESET}"
              iptables -I FORWARD -j DOCKER-USER
              echo -e "${GREEN}$(t "forward_to_docker_user_added")${RESET}"
          else
              echo -e "${GREEN}$(t "forward_to_docker_user_exists")${RESET}"
          fi
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ DOCKER –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
      echo -e "\n${BLUE}$(t "checking_docker_chain_rules")${RESET}"
      if iptables -L DOCKER -n >/dev/null 2>&1; then
          echo -e "${GREEN}$(t "docker_chain_available")${RESET}"

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
          add_docker_user_rules() {
              local port=$1
              local type=$2
              local added=0
              local rules

              echo -e "\n${CYAN}$(t "checking_${type}_rpc_port") $port${RESET}"
              rules=$(iptables -L DOCKER -n | grep -E "tcp dpt:$port($| )")
              while read -r line; do
                  dest_ip=$(echo "$line" | awk 'match($0, /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(\/[0-9]+)?[[:space:]]+tcp dpt:[0-9]+/) {
                      split(substr($0, RSTART, RLENGTH), parts, /[[:space:]]+/);
                      print parts[1]
                  }')

                  if [ -n "$dest_ip" ]; then
                      echo -e "${YELLOW}$(t "found_rule_for_port") $port: $(t "destination_ip") ${GREEN}$dest_ip${RESET}"

                      # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
                      if ! iptables -n -L DOCKER-USER | grep -q -E "ACCEPT +tcp +-- +${dest_ip//./\\.} +0\.0\.0\.0\/0"; then
                          echo -e "${YELLOW}$(t "adding_accept_rule_for_ip") $dest_ip${RESET}"
                          iptables -I DOCKER-USER -p tcp -s $dest_ip -j ACCEPT
                          added=$((added + 1))
                      else
                          echo -e "${GREEN}$(t "accept_rule_already_exists") $dest_ip${RESET}"
                      fi
                  else
                      echo -e "${YELLOW}$(t "found_rule_for_port") $port: ${RED}$(t "failed_to_get_ip")${RESET}"
                      echo -e "${YELLOW}–°—Ç—Ä–æ–∫–∞ iptables: $line${RESET}"
                  fi
              done <<< "$rules"

              if [ $added -gt 0 ]; then
                  echo -e "${GREEN}$(t "added_rules_count") $added ${type}${RESET}"
              fi
          }

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è EXECUTION_RPC_PORT
          if [ -n "$EXECUTION_RPC_PORT" ]; then
              add_docker_user_rules "$EXECUTION_RPC_PORT" "execution"
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è CONSENSUS_RPC_PORT
          if [ -n "$CONSENSUS_RPC_PORT" ]; then
              add_docker_user_rules "$CONSENSUS_RPC_PORT" "consensus"
          fi
      else
          echo -e "${YELLOW}$(t "docker_chain_not_found")${RESET}"
      fi

      # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç (CONSENSUS_P2P_PORT —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–π 1)
      local alt_consensus_p2p_port="${CONSENSUS_P2P_PORT%?}1"

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å UFW
      echo -e "\n${BLUE}$(t "checking_ufw_status")${RESET}"
      if ufw status | grep -q "Status: active"; then
          echo -e "${GREEN}$(t "ufw_already_enabled")${RESET}"
      else
          echo -e "${YELLOW}$(t "ufw_disabled_configuring")${RESET}"
          # –†–∞–∑—Ä–µ—à–∞–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          echo -e "${YELLOW}$(t "adding_ssh_port_rule")${RESET}"
          ufw allow 22
          echo -e "${YELLOW}$(t "adding_ssh_name_rule")${RESET}"
          ufw allow ssh

          # –í–∫–ª—é—á–∞–µ–º UFW —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
          echo -e "${YELLOW}$(t "enabling_ufw")${RESET}"
          if ! ufw enable; then
              echo -e "${RED}$(t "failed_to_enable_ufw")${RESET}"
              return 1
          fi
          echo -e "\n${GREEN}$(t "ufw_enabled_successfully")${RESET}"
      fi

	# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤ (–æ–±—â–µ–µ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤)
	echo -e "\n${YELLOW}$(t "adding_exec_p2p_port_rule")${RESET}"
	for port in "$EXECUTION_P2P_PORT" "$CONSENSUS_P2P_PORT" "$alt_consensus_p2p_port"; do
		if ! ufw status | grep -q "$port/tcp"; then
			ufw allow "$port"/tcp
			ufw allow "$port"/udp
		else
			echo -e "${GREEN}$(t "port_rule_exists") $port${RESET}"
		fi
	done

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
      echo -e "\n${CYAN}$(t "current_ufw_status")${RESET}"
      ufw status numbered

      return 0
  }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
    rule_exists() {
        local rule="$@"
        if iptables -C DOCKER-USER $rule >/dev/null 2>&1; then
            return 0
        else
            return 1
        fi
    }

	# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RPC –ø–æ—Ä—Ç–æ–≤
	add_global_drop_rule() {
		# –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –ø–æ—Ä—Ç (CONSENSUS_RPC_PORT —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–π 1)
		local alt_consensus_port="${CONSENSUS_RPC_PORT%?}1"

		# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ iptables –≤ /dev/null
		exec 3>&1  # –°–æ—Ö—Ä–∞–Ω—è–µ–º stdout
		exec 1>/dev/null  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –≤ /dev/null

		# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
		local new_rules=()
		local existing_rules=()

		# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ü–µ–ø–æ—á–∫–∏
		add_drop_rule() {
			local port=$1
			local protocol=$2
			if ! iptables -C DOCKER-USER -p $protocol --dport "$port" -j DROP 2>/dev/null; then
				iptables -A DOCKER-USER -p $protocol --dport "$port" -j DROP 2>/dev/null
				new_rules+=("$port ($protocol)")
				return 0
			else
				existing_rules+=("$port ($protocol)")
				return 1
			fi
		}

		# –ë–ª–æ–∫–∏—Ä—É–µ–º EXECUTION_RPC_PORT (TCP)
		add_drop_rule "$EXECUTION_RPC_PORT" "tcp"

		# –ë–ª–æ–∫–∏—Ä—É–µ–º CONSENSUS_RPC_PORT (TCP)
		add_drop_rule "$CONSENSUS_RPC_PORT" "tcp"

		# –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π CONSENSUS_RPC_PORT (TCP)
		add_drop_rule "$alt_consensus_port" "tcp"

		# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout
		exec 1>&3

		# –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
		echo -e "\n${YELLOW}$(t "blocking_rpc_ports")${RESET}"

		if [ ${#new_rules[@]} -gt 0 ]; then
			echo -e "${GREEN}$(t "blocked_ports") ${new_rules[*]}${RESET}"
		fi

		if [ ${#existing_rules[@]} -gt 0 ]; then
			echo -e "${YELLOW}$(t "ports_already_blocked") ${existing_rules[*]}${RESET}"
		fi
	}

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ–º DROP –≤ –∫–æ–Ω—Ü–µ
    add_rule() {
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        echo -e "\n${BLUE}$(t "adding_rule")${RESET} ${CYAN}iptables -I DOCKER-USER $@${RESET}"
        if ! rule_exists "$@"; then
            if iptables -I DOCKER-USER "$@"; then
                echo -e "${GREEN}$(t "rule_added")${RESET}"
            else
                echo -e "${RED}$(t "failed_to_add_rule")${RESET}"
            fi
        else
            echo -e "${YELLOW}$(t "rule_already_exists")${RESET}"
        fi

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ DROP –≤ –∫–æ–Ω–µ—Ü
        add_global_drop_rule
    }

	# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤
	show_port_rules() {
		echo -e "\n${YELLOW}$(t "current_port_rules")${RESET}"
		echo -e "${CYAN}$(t "docker_user_port_rules")${RESET}"
		iptables -L DOCKER-USER -n --line-numbers | grep -E "dpt:|spt:"

		# –ü—Ä–∞–≤–∏–ª–∞ UFW –¥–ª—è –ø–æ—Ä—Ç–æ–≤
		echo -e "\n${CYAN}$(t "ufw_port_rules")${RESET}"
		ufw status numbered | grep -v '^Status:' | grep -E '([0-9]+/[a-zA-Z]+)|(ANYWHERE)|$'

		print_info "\n$(t "current_port_config" "$EXECUTION_RPC_PORT" "$EXECUTION_P2P_PORT" "$EXECUTION_AUTH_RPC_PORT" "$CONSENSUS_RPC_PORT" "$CONSENSUS_P2P_PORT")"
	}

	# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è IP
	show_ip_rules() {
		echo -e "\n${YELLOW}$(t "current_ip_rules")${RESET}"
		echo -e "${CYAN}$(t "docker_user_ip_rules")${RESET}"
		sudo iptables -L DOCKER-USER -n --line-numbers | awk '$4 != "0.0.0.0/0" && $1 != "target"'

		# –ü—Ä–∞–≤–∏–ª–∞ UFW –¥–ª—è IP
		echo -e "\n${CYAN}$(t "ufw_ip_rules")${RESET}"
		ufw status numbered | grep -v '^Status:' | grep -E '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?)|(ANYWHERE)|$'

		print_info "\n$(t "current_port_config" "$EXECUTION_RPC_PORT" "$EXECUTION_P2P_PORT" "$EXECUTION_AUTH_RPC_PORT" "$CONSENSUS_RPC_PORT" "$CONSENSUS_P2P_PORT")"
	}

	# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏
	port_management() {
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
		trap 'continue' SIGINT

		while true; do
			# –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
			show_port_rules

			echo -e "\n${CYAN}$(t "port_management_menu")${RESET}"
			echo -e "1) $(t "open_port_option")"
			echo -e "2) $(t "close_port_option")"
			echo -e "3) $(t "block_rpc_ports_option")"
			echo -e "${RED}0) $(t "return_to_main_menu")${RESET}"
			echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"

			# –ß—Ç–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Ctrl+C
			if ! read -p "$(t "select_option")" choice; then
				continue
			fi

			case $choice in
				1)
					echo -e "\n${GREEN}$(t "opening_port")${RESET}"
					if ! read -p "$(t "enter_port_number_prompt")" ports; then
						continue
					fi

					# –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
					echo -e "\n${YELLOW}$(t "select_direction")${RESET}"
					echo " 1) $(t "incoming_connections")"
					echo " 2) $(t "outgoing_connections")"
					echo " 3) $(t "all_directions")"
					if ! read -p "$(t "select_direction_prompt")" direction; then
						continue
					fi

					# –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
					echo -e "\n${YELLOW}$(t "select_protocol")${RESET}"
					echo " 1) TCP"
					echo " 2) UDP"
					echo " 3) $(t "all_protocols")"
					if ! read -p "$(t "select_protocol_prompt")" protocol; then
						continue
					fi

					if [[ $ports =~ ^[0-9]+(,[0-9]+)*$ ]] && [[ $direction =~ ^[1-3]$ ]] && [[ $protocol =~ ^[1-3]$ ]]; then
						# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
						case $direction in
							1)
								direction_param="--dport"
								ufw_direction="in"
								;;
							2)
								direction_param="--sport"
								ufw_direction="out"
								;;
							3)
								direction_param="--dport --sport"
								ufw_direction="both"
								;;
						esac

						# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
						case $protocol in
							1)
								protocols=("tcp")
								;;
							2)
								protocols=("udp")
								;;
							3)
								protocols=("tcp" "udp")
								;;
						esac

						IFS=',' read -ra port_list <<< "$ports"

						# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞, –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
						for port in "${port_list[@]}"; do
							for proto in "${protocols[@]}"; do
								for dir in $direction_param; do
									echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
									#echo -e "\n${BLUE}$(t "adding_iptables_rule") $port, $(t "protocol") $proto, $(t "direction") $dir${RESET}"
									add_rule -p $proto $dir $port -j ACCEPT

									# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è UFW
									if [ "$ufw_direction" == "both" ]; then
										echo -e "\n${BLUE}$(t "adding_ufw_rule") $port/$proto ($(t "in_and_out"))${RESET}"
										ufw allow $port/$proto
										ufw allow out $port/$proto
										echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
									else
										echo -e "\n${BLUE}$(t "adding_ufw_rule") $port/$proto, $(t "direction") $ufw_direction${RESET}"
										ufw allow $ufw_direction $port/$proto
										echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
									fi
								done
							done
						done
					else
						echo -e "${RED}$(t "invalid_input_error")${RESET}"
					fi
					;;
				2)
					echo -e "\n${RED}$(t "deleting_rules")${RESET}"
					echo -e "${YELLOW}$(t "select_rule_type_to_delete")${RESET}"
					echo " 1) $(t "delete_iptables_rule")"
					echo " 2) $(t "delete_ufw_rule")"
					echo " 3) $(t "delete_both_rules")"
					if ! read -p "$(t "select_option")" delete_type; then
						continue
					fi

					case $delete_type in
						1)
							# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ iptables –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_iptables_rule_numbers")${RESET}"
							if ! read -p "$(t "rule_numbers_to_delete_prompt")" rule_numbers; then
								continue
							fi

							# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ (–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
							declare -a rules_to_delete=()
							IFS=',' read -ra parts <<< "$rule_numbers"
							for part in "${parts[@]}"; do
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											rules_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									rules_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							# –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
							IFS=$'\n' sorted_rules=($(sort -nr <<< "${rules_to_delete[*]}"))
							unset IFS

							deleted_count=0
							for rule_num in "${sorted_rules[@]}"; do
								if iptables -L DOCKER-USER -n --line-numbers | grep -q "^${rule_num}\>"; then
									local rule=$(iptables -S DOCKER-USER $rule_num)
									echo -e "${BLUE}$(t "deleting_iptables_rule") ‚Ññ$rule_num: $rule${RESET}"
									iptables -D DOCKER-USER $rule_num
									((deleted_count++))
								else
									echo -e "${YELLOW}$(t "rule_not_found_skipping") ‚Ññ$rule_num${RESET}"
								fi
							done

							add_global_drop_rule
							echo -e "\n${GREEN}$(t "deleted_iptables_rules") $deleted_count${RESET}"
							;;

						2)
							# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ UFW –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_ufw_rule_numbers")${RESET}"
							if ! read -p "$(t "rule_numbers_to_delete_prompt")" rule_numbers; then
								continue
							fi

							# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ (–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
							declare -a rules_to_delete=()
							IFS=',' read -ra parts <<< "$rule_numbers"
							for part in "${parts[@]}"; do
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											rules_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									rules_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							# –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
							IFS=$'\n' sorted_rules=($(sort -nr <<< "${rules_to_delete[*]}"))
							unset IFS

							deleted_count=0
							for rule_num in "${sorted_rules[@]}"; do
								echo -e "${BLUE}$(t "deleting_ufw_rule") ‚Ññ$rule_num${RESET}"
								if yes | ufw --force delete $rule_num; then
									((deleted_count++))
								else
									echo -e "${YELLOW}$(t "failed_to_delete_rule") ‚Ññ$rule_num${RESET}"
								fi
							done

							echo -e "\n${GREEN}$(t "deleted_ufw_rules") $deleted_count${RESET}"
							;;

						3)
							# –£–¥–∞–ª–µ–Ω–∏–µ –∏ iptables –∏ UFW –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_iptables_rule_numbers")${RESET}"
							if ! read -p "$(t "iptables_rule_numbers_prompt")" iptables_rules; then
								continue
							fi

							echo -e "\n${YELLOW}$(t "enter_ufw_rule_numbers")${RESET}"
							if ! read -p "$(t "ufw_rule_numbers_prompt")" ufw_rules; then
								continue
							fi

							# –û–±—Ä–∞–±–æ—Ç–∫–∞ iptables –ø—Ä–∞–≤–∏–ª
							declare -a iptables_to_delete=()
							IFS=',' read -ra parts <<< "$iptables_rules"
							for part in "${parts[@]}"; do
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											iptables_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									iptables_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							IFS=$'\n' sorted_iptables=($(sort -nr <<< "${iptables_to_delete[*]}"))
							unset IFS

							iptables_deleted=0
							for rule_num in "${sorted_iptables[@]}"; do
								if iptables -L DOCKER-USER -n --line-numbers | grep -q "^${rule_num}\>"; then
									local rule=$(iptables -S DOCKER-USER $rule_num)
									echo -e "${BLUE}$(t "deleting_iptables_rule") ‚Ññ$rule_num: $rule${RESET}"
									iptables -D DOCKER-USER $rule_num
									((iptables_deleted++))
								else
									echo -e "${YELLOW}$(t "rule_not_found_skipping") ‚Ññ$rule_num${RESET}"
								fi
							done

							# –û–±—Ä–∞–±–æ—Ç–∫–∞ UFW –ø—Ä–∞–≤–∏–ª
							declare -a ufw_to_delete=()
							IFS=',' read -ra parts <<< "$ufw_rules"
							for part in "${parts[@]}"; do
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											ufw_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									ufw_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							IFS=$'\n' sorted_ufw=($(sort -nr <<< "${ufw_to_delete[*]}"))
							unset IFS

							ufw_deleted=0
							for rule_num in "${sorted_ufw[@]}"; do
								echo -e "${BLUE}$(t "deleting_ufw_rule") ‚Ññ$rule_num${RESET}"
								if yes | ufw --force delete $rule_num; then
									((ufw_deleted++))
								else
									echo -e "${YELLOW}$(t "failed_to_delete_rule") ‚Ññ$rule_num${RESET}"
								fi
							done

							add_global_drop_rule
							echo -e "\n${GREEN}$(t "deleted_iptables_rules") $iptables_deleted${RESET}"
							echo -e "${GREEN}$(t "deleted_ufw_rules") $ufw_deleted${RESET}"
							;;

						*)
							echo -e "${RED}$(t "invalid_choice_cancel")${RESET}"
							;;
					esac
					;;
				3)
					echo -e "\n${BLUE}$(t "blocking_rpc_ports_for_all")${RESET}"
					add_global_drop_rule

					# –¢–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ UFW
					echo -e "\n${BLUE}$(t "changing_ufw_policy_to_block_all")${RESET}"
					ufw default deny incoming
					;;
				0)
					break
					;;
				*)
					echo -e "${RED}$(t "invalid_option")${RESET}"
					;;
			esac

			echo ""
			if ! read -p "$(t "press_enter_to_continue")"; then
				continue
			fi
		done

		# –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
		trap - SIGINT
	}

	# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞–º–∏
	ip_management() {
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
		trap 'continue' SIGINT

		while true; do
			# –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
			show_ip_rules

			echo -e "\n${CYAN}$(t "ip_management_menu")${RESET}"
			echo -e "1) $(t "allow_access_from_ip")"
			echo -e "2) $(t "deny_access_delete_rule")"
			echo -e "${RED}0) $(t "return_to_main_menu")${RESET}"
			echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"

			# –ß—Ç–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Ctrl+C
			if ! read -p "$(t "select_option")" choice; then
				continue
			fi

			case $choice in
				1)
					echo -e "\n${GREEN}$(t "allowing_access_from_ip")${RESET}"
					if ! read -p "$(t "enter_ip_or_subnet_prompt")" ip_input; then
						continue
					fi

					if ! read -p "$(t "enter_port_number_optional_prompt")" port_input; then
						continue
					fi

					# –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
					echo -e "\n${YELLOW}$(t "select_direction")${RESET}"
					echo "1) $(t "incoming_connections")"
					echo "2) $(t "outgoing_connections")"
					echo "3) $(t "all_directions")"
					if ! read -p "$(t "select_direction_prompt")" direction; then
						continue
					fi

					# –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
					echo -e "\n${YELLOW}$(t "select_protocol")${RESET}"
					echo "1) TCP"
					echo "2) UDP"
					echo "3) $(t "all_protocols")"
					if ! read -p "$(t "select_protocol_prompt")" protocol; then
						continue
					fi

					# –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç—ã
					IFS=',' read -ra ip_list <<< "$ip_input"
					IFS=',' read -ra port_list <<< "$port_input"
					unset IFS

					valid_input=true

					# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ IP-–∞–¥—Ä–µ—Å–∞
					for ip in "${ip_list[@]}"; do
						if [[ ! $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?$ ]]; then
							echo -e "${RED}$(t "invalid_ip_format") $ip${RESET}"
							valid_input=false
						fi
					done

					# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã
					for port in "${port_list[@]}"; do
						if [[ -n $port && ! $port =~ ^[0-9]+$ ]]; then
							echo -e "${RED}$(t "port_must_be_number_error") $port${RESET}"
							valid_input=false
						fi
					done

					if [[ $valid_input == true ]] && [[ $direction =~ ^[1-3]$ ]] && [[ $protocol =~ ^[1-3]$ ]]; then
						# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
						case $direction in
							1)
								direction_param="--dport"
								ufw_direction="in"
								;;
							2)
								direction_param="--sport"
								ufw_direction="out"
								;;
							3)
								direction_param="--dport --sport"
								ufw_direction="both"
								;;
						esac

						# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
						case $protocol in
							1) protocols=("tcp") ;;
							2) protocols=("udp") ;;
							3) protocols=("tcp" "udp") ;;
						esac

						# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π IP-–∞–¥—Ä–µ—Å
						for ip in "${ip_list[@]}"; do
							# –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã
							if [[ ${#port_list[@]} -eq 0 ]] || [[ -z $port_input ]]; then
							    echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
								#echo -e "\n${BLUE}$(t "adding_iptables_rule_for_all_traffic_from") $ip...${RESET}"
								add_rule -s $ip -j ACCEPT

								# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ UFW
								echo -e "\n${BLUE}$(t "adding_ufw_rule_for_all_traffic_from") $ip...${RESET}"
								ufw allow from $ip
								echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
							else
								# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ä—Ç
								for port in "${port_list[@]}"; do
									# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
									for proto in "${protocols[@]}"; do
										for dir in $direction_param; do
											echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
											#echo -e "\n${BLUE}$(t "adding_iptables_rule_for_port") $port $(t "from") $ip, $(t "protocol") $proto, $(t "direction") $dir...${RESET}"
											add_rule -s $ip -p $proto $dir $port -j ACCEPT

											# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ UFW
											if [ "$ufw_direction" == "both" ]; then
												echo -e "\n${BLUE}$(t "adding_ufw_rule_for_port") $port/$proto $(t "from") $ip ($(t "in_and_out"))...${RESET}"
												ufw allow from $ip to any port $port proto $proto
												ufw allow out from any to $ip port $port proto $proto
												echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
											else
												echo -e "\n${BLUE}$(t "adding_ufw_rule_for_port") $port/$proto $(t "from") $ip ($(t "direction") $ufw_direction)...${RESET}"
												if [ "$ufw_direction" == "in" ]; then
													ufw allow from $ip to any port $port proto $proto
													echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
												else
													ufw allow out from any to $ip port $port proto $proto
													echo -e "\n${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
												fi
											fi
										done
									done
								done
							fi
						done
					else
						echo -e "${RED}$(t "invalid_input_error")${RESET}"
						echo -e "${YELLOW}$(t "correct_input_examples")${RESET}"
						echo -e "$(t "ip_example")"
					fi
					;;
				2)
					echo -e "\n${RED}$(t "deleting_rules")${RESET}"
					echo -e "${YELLOW}$(t "select_rule_type_to_delete")${RESET}"
					echo "1) $(t "delete_iptables_rule")"
					echo "2) $(t "delete_ufw_rule")"
					echo "3) $(t "delete_both_rules")"
					if ! read -p "$(t "select_option")" delete_type; then
						continue
					fi

					case $delete_type in
						1)
							# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ iptables –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_iptables_rule_numbers")${RESET}"
							if ! read -p "$(t "rule_numbers_to_delete_prompt")" rule_numbers; then
								continue
							fi

							# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ (–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
							declare -a rules_to_delete=()
							IFS=',' read -ra parts <<< "$rule_numbers"
							for part in "${parts[@]}"; do
								part=$(echo "$part" | tr -d '[:space:]')  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											rules_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									rules_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							# –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
							IFS=$'\n' sorted_rules=($(sort -nr <<< "${rules_to_delete[*]}"))
							unset IFS

							deleted_count=0
							for rule_num in "${sorted_rules[@]}"; do
								if iptables -L DOCKER-USER -n --line-numbers | grep -q "^${rule_num}\>"; then
									local rule=$(iptables -S DOCKER-USER $rule_num)
									echo -e "${BLUE}$(t "deleting_iptables_rule") ‚Ññ$rule_num: $rule${RESET}"
									iptables -D DOCKER-USER $rule_num
									((deleted_count++))
								else
									echo -e "${YELLOW}$(t "rule_not_found_skipping") ‚Ññ$rule_num${RESET}"
								fi
							done

							add_global_drop_rule
							echo -e "\n${GREEN}$(t "deleted_iptables_rules") $deleted_count${RESET}"
							;;

						2)
							# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ UFW –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_ufw_rule_numbers")${RESET}"
							if ! read -p "$(t "rule_numbers_to_delete_prompt")" rule_numbers; then
								continue
							fi

							# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ (–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
							declare -a rules_to_delete=()
							IFS=',' read -ra parts <<< "$rule_numbers"
							for part in "${parts[@]}"; do
								part=$(echo "$part" | tr -d '[:space:]')  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											rules_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									rules_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							# –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
							IFS=$'\n' sorted_rules=($(sort -nr <<< "${rules_to_delete[*]}"))
							unset IFS

							deleted_count=0
							for rule_num in "${sorted_rules[@]}"; do
								echo -e "${BLUE}$(t "deleting_ufw_rule") ‚Ññ$rule_num${RESET}"
								if yes | ufw --force delete $rule_num; then
									((deleted_count++))
								else
									echo -e "${YELLOW}$(t "failed_to_delete_rule") ‚Ññ$rule_num${RESET}"
								fi
							done

							echo -e "\n${GREEN}$(t "deleted_ufw_rules") $deleted_count${RESET}"
							;;

						3)
							# –£–¥–∞–ª–µ–Ω–∏–µ –∏ iptables –∏ UFW –ø—Ä–∞–≤–∏–ª
							echo -e "\n${YELLOW}$(t "enter_iptables_rule_numbers")${RESET}"
							if ! read -p "$(t "iptables_rule_numbers_prompt")" iptables_rules; then
								continue
							fi

							echo -e "\n${YELLOW}$(t "enter_ufw_rule_numbers")${RESET}"
							if ! read -p "$(t "ufw_rule_numbers_prompt")" ufw_rules; then
								continue
							fi

							# –û–±—Ä–∞–±–æ—Ç–∫–∞ iptables –ø—Ä–∞–≤–∏–ª
							declare -a iptables_to_delete=()
							IFS=',' read -ra parts <<< "$iptables_rules"
							for part in "${parts[@]}"; do
								part=$(echo "$part" | tr -d '[:space:]')  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											iptables_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									iptables_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							IFS=$'\n' sorted_iptables=($(sort -nr <<< "${iptables_to_delete[*]}"))
							unset IFS

							iptables_deleted=0
							for rule_num in "${sorted_iptables[@]}"; do
								if iptables -L DOCKER-USER -n --line-numbers | grep -q "^${rule_num}\>"; then
									local rule=$(iptables -S DOCKER-USER $rule_num)
									echo -e "${BLUE}$(t "deleting_iptables_rule") ‚Ññ$rule_num: $rule${RESET}"
									iptables -D DOCKER-USER $rule_num
									((iptables_deleted++))
								else
									echo -e "${YELLOW}$(t "rule_not_found_skipping") ‚Ññ$rule_num${RESET}"
								fi
							done

							# –û–±—Ä–∞–±–æ—Ç–∫–∞ UFW –ø—Ä–∞–≤–∏–ª
							declare -a ufw_to_delete=()
							IFS=',' read -ra parts <<< "$ufw_rules"
							for part in "${parts[@]}"; do
								part=$(echo "$part" | tr -d '[:space:]')  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
								if [[ $part =~ ^[0-9]+-[0-9]+$ ]]; then
									# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
									start=${part%-*}
									end=${part#*-}
									if (( start <= end )); then
										for ((i=start; i<=end; i++)); do
											ufw_to_delete+=("$i")
										done
									else
										echo -e "${YELLOW}$(t "invalid_range_skipping") $part${RESET}"
									fi
								elif [[ $part =~ ^[0-9]+$ ]]; then
									# –û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä
									ufw_to_delete+=("$part")
								else
									echo -e "${YELLOW}$(t "invalid_rule_number_skipping") $part${RESET}"
								fi
							done

							IFS=$'\n' sorted_ufw=($(sort -nr <<< "${ufw_to_delete[*]}"))
							unset IFS

							ufw_deleted=0
							for rule_num in "${sorted_ufw[@]}"; do
								echo -e "${BLUE}$(t "deleting_ufw_rule") ‚Ññ$rule_num${RESET}"
								if yes | ufw --force delete $rule_num; then
									((ufw_deleted++))
								else
									echo -e "${YELLOW}$(t "failed_to_delete_rule") ‚Ññ$rule_num${RESET}"
								fi
							done

							add_global_drop_rule
							echo -e "\n${GREEN}$(t "deleted_iptables_rules") $iptables_deleted${RESET}"
							echo -e "${GREEN}$(t "deleted_ufw_rules") $ufw_deleted${RESET}"
							;;

						*)
							echo -e "${RED}$(t "invalid_choice_cancel")${RESET}"
							;;
					esac
					;;
				0)
					break
					;;
				*)
					echo -e "${RED}$(t "invalid_option")${RESET}"
					;;
			esac

			echo ""
			if ! read -p "$(t "press_enter_to_continue")"; then
				continue
			fi
		done

		# –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
		trap - SIGINT
	}

	# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
	view_rules() {
		echo -e "\n${YELLOW}$(t "view_all_rules")${RESET}"

		# –í—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª iptables
		echo -e "\n${CYAN}$(t "current_docker_user_chain_rules")${RESET}"
		local iptables_rules=$(iptables -L DOCKER-USER -n --line-numbers)
		if [ -z "$(echo "$iptables_rules" | grep -v '^Chain' | grep -v '^num')" ]; then
			echo -e "${YELLOW}$(t "no_rules_in_docker_user_chain")${RESET}"
		else
			echo "$iptables_rules"
		fi

		# –í—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª UFW
		echo -e "\n${CYAN}$(t "current_ufw_rules")${RESET}"
		local ufw_rules=$(ufw status numbered | grep -v '^Status:')
		if [ -z "$ufw_rules" ]; then
			echo -e "${YELLOW}$(t "no_active_ufw_rules")${RESET}"
		else
			echo "$ufw_rules"
		fi

		# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ iptables
		echo -e "\n${CYAN}$(t "iptables_rules_stats")${RESET}"
		local total_rules=$(iptables -L DOCKER-USER -n | grep -c "^ACCEPT")
		local denied_rules=$(iptables -L DOCKER-USER -n | grep -c "^DROP")
		echo -e "$(t "total_accept_rules") ${GREEN}$total_rules${RESET}"
		echo -e "$(t "total_drop_reject_rules") ${RED}$denied_rules${RESET}"

		# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UFW
		echo -e "\n${CYAN}$(t "ufw_rules_stats")${RESET}"
		local ufw_policy=$(ufw status verbose | grep "Default:")
		local ufw_policy_in=$(echo "$ufw_policy" | awk '{print $2}' | tr -d ',')
		local ufw_policy_out=$(echo "$ufw_policy" | awk '{print $4}')
		local ufw_allow=$(ufw status numbered | grep -c "ALLOW")
		local ufw_deny=$(ufw status numbered | grep -c "DENY")

		echo -e "$(t "default_policy")"
		echo -e "  $(t "incoming") ${BLUE}$ufw_policy_in${RESET}"
		echo -e "  $(t "outgoing") ${BLUE}$ufw_policy_out${RESET}"
		echo -e "$(t "total_allow_rules") ${GREEN}$ufw_allow${RESET}"
		echo -e "$(t "total_deny_reject_rules") ${RED}$ufw_deny${RESET}"
	}

	# –°–±—Ä–æ—Å –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
	reset_rules() {
		echo -e "\n${RED}$(t "reset_all_rules")${RESET}"
		echo -e "${YELLOW}$(t "you_are_about_to_perform")${RESET}"
		echo -e "1. $(t "clear_all_rules_in_docker_user_chain")"
		echo -e "2. $(t "reset_all_ufw_rules")"
		echo -e "3. $(t "restart_docker_service")"

		read -p "$(echo -e "${RED}$(t "are_you_sure_prompt") ${RESET}")" confirm
		if [[ $confirm =~ ^[Yy]$ ]]; then
			echo -e "\n${BLUE}1. $(t "clearing_docker_user_chain")...${RESET}"
			if iptables -F DOCKER-USER; then
				echo -e "${GREEN}$(t "all_docker_user_rules_deleted")${RESET}"
			else
				echo -e "${RED}$(t "failed_to_clear_docker_user")${RESET}"
				return 1
			fi

			echo -e "\n${BLUE}2. $(t "resetting_ufw_rules")...${RESET}"
			if ufw --force reset; then
				echo -e "${GREEN}$(t "all_ufw_rules_reset")${RESET}"
			else
				echo -e "${RED}$(t "failed_to_reset_ufw")${RESET}"
			fi

			echo -e "\n${BLUE}3. $(t "restarting_docker")...${RESET}"
			if systemctl restart docker; then
				echo -e "${GREEN}$(t "docker_restarted_successfully")${RESET}"
				echo -e "\n${YELLOW}$(t "current_docker_user_status")${RESET}"
				iptables -L DOCKER-USER -n
				echo -e "\n${YELLOW}$(t "current_ufw_status")${RESET}"
				ufw status
			else
				echo -e "${RED}$(t "failed_to_restart_docker")${RESET}"
			fi
		else
			echo -e "${YELLOW}$(t "rules_reset_cancelled")${RESET}"
		fi
	}

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    while true; do
        echo -e "\n${YELLOW}$(t "script_works_in_iptables")${RESET}"
		echo -e "${YELLOW}$(t "port_ip_management_logic")${RESET}"
		echo -e "${YELLOW}$(t "on_first_run")${RESET}"
		echo -e "${YELLOW}   1) $(t "first_run_option_1")${RESET}"
		echo -e "${YELLOW}   2) $(t "first_run_option_2")${RESET}"
		echo -e "${YELLOW}   3) $(t "first_run_option_3")${RESET}"
		echo -e "${YELLOW}$(t "now_you_can_add_remove")${RESET}"
		echo -e "\n${BLUE}$(t "firewall_management_main_menu")${RESET}"
		echo -e "${RESET}1) $(t "enable_and_prepare_option")${RESET}"
        echo -e "${RESET}2) $(t "port_management_option")${RESET}"
        echo -e "${RESET}3) $(t "ip_management_option")${RESET}"
        echo -e "${RESET}4) $(t "view_all_rules_option")${RESET}"
        echo -e "${RED}5) $(t "reset_all_rules_option")${RESET}"
        echo -e "${RED}0) $(t "exit_option")${RESET}"
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"

        read -p "$(t "select_option")" choice

        case $choice in
			1) check_docker_user_chain_ufw ;;
            2) port_management ;;
            3) ip_management ;;
            4) view_rules ;;
            5) reset_rules ;;
            0)
                echo -e "${GREEN}$(t "exiting_firewall_menu")${RESET}"
                break
                ;;
            *)
                echo -e "${RED}$(t "invalid_option")${RESET}"
                ;;
        esac

		if [[ "$choice" != "0" ]]; then
            echo ""
            read -p "$(t "press_enter_to_continue")"
        fi
    done
}

#Script created by Creed https://www.notion.so/Aztec-Commands-by-Creed-1f2da4dd4652808e908bc7426bbbb284
function run_rpc_check {
  URL="https://raw.githubusercontent.com/pittpv/sepolia-auto-install/main/other/rpc_check.sh"
  echo -e "${CYAN}Running RPC check script from GitHub...${RESET}"
  bash <(curl -s "$URL") || print_error "Failed to run RPC check script."
}

# Main menu
function main_menu {
  show_logo
  check_version
  load_port_configuration # Load config at the start of the menu
  load_resource_configuration # Load resource config at the start of the menu
  while true; do
    echo -e "\n${BLUE}$(t "menu_title")${RESET}"
    echo -e "$(t "menu_options")"
    echo -e "${BLUE}==================================${RESET}"
    read -p "$(t "select_option")" choice
    case $choice in
      1) install_requirements ;;
      2) install_node ;;
      3) update_node ;;
      4) view_logs ;;
      5) check_sync ;;
      6) setup_cron_agent ;;
      7) remove_cron_agent ;;
      8) stop_containers ;;
      9) start_containers ;;
      10) delete_node ;;
      11) change_installed_ports ;;
      12) check_disk_usage ;;
      13) firewall_setup ;;
      14) run_rpc_check ;;
      15) configure_docker_resources ;;
      0) print_info "$(t "goodbye")"; exit 0 ;;
      *) print_error "$(t "invalid_option")" ;;
    esac
  done
}

main_menu
